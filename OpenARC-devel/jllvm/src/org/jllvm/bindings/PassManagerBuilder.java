/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.jllvm.bindings;

public class PassManagerBuilder {
  public static SWIGTYPE_p_LLVMOpaquePassManagerBuilder LLVMPassManagerBuilderCreate() {
    long cPtr = PassManagerBuilderJNI.LLVMPassManagerBuilderCreate();
    return (cPtr == 0) ? null : new SWIGTYPE_p_LLVMOpaquePassManagerBuilder(cPtr, false);
  }

  public static void LLVMPassManagerBuilderDispose(SWIGTYPE_p_LLVMOpaquePassManagerBuilder PMB) {
    PassManagerBuilderJNI.LLVMPassManagerBuilderDispose(SWIGTYPE_p_LLVMOpaquePassManagerBuilder.getCPtr(PMB));
  }

  public static void LLVMPassManagerBuilderSetOptLevel(SWIGTYPE_p_LLVMOpaquePassManagerBuilder PMB, long OptLevel) {
    PassManagerBuilderJNI.LLVMPassManagerBuilderSetOptLevel(SWIGTYPE_p_LLVMOpaquePassManagerBuilder.getCPtr(PMB), OptLevel);
  }

  public static void LLVMPassManagerBuilderSetSizeLevel(SWIGTYPE_p_LLVMOpaquePassManagerBuilder PMB, long SizeLevel) {
    PassManagerBuilderJNI.LLVMPassManagerBuilderSetSizeLevel(SWIGTYPE_p_LLVMOpaquePassManagerBuilder.getCPtr(PMB), SizeLevel);
  }

  public static void LLVMPassManagerBuilderSetDisableUnitAtATime(SWIGTYPE_p_LLVMOpaquePassManagerBuilder PMB, int Value) {
    PassManagerBuilderJNI.LLVMPassManagerBuilderSetDisableUnitAtATime(SWIGTYPE_p_LLVMOpaquePassManagerBuilder.getCPtr(PMB), Value);
  }

  public static void LLVMPassManagerBuilderSetDisableUnrollLoops(SWIGTYPE_p_LLVMOpaquePassManagerBuilder PMB, int Value) {
    PassManagerBuilderJNI.LLVMPassManagerBuilderSetDisableUnrollLoops(SWIGTYPE_p_LLVMOpaquePassManagerBuilder.getCPtr(PMB), Value);
  }

  public static void LLVMPassManagerBuilderSetDisableSimplifyLibCalls(SWIGTYPE_p_LLVMOpaquePassManagerBuilder PMB, int Value) {
    PassManagerBuilderJNI.LLVMPassManagerBuilderSetDisableSimplifyLibCalls(SWIGTYPE_p_LLVMOpaquePassManagerBuilder.getCPtr(PMB), Value);
  }

  public static void LLVMPassManagerBuilderUseInlinerWithThreshold(SWIGTYPE_p_LLVMOpaquePassManagerBuilder PMB, long Threshold) {
    PassManagerBuilderJNI.LLVMPassManagerBuilderUseInlinerWithThreshold(SWIGTYPE_p_LLVMOpaquePassManagerBuilder.getCPtr(PMB), Threshold);
  }

  public static void LLVMPassManagerBuilderPopulateFunctionPassManager(SWIGTYPE_p_LLVMOpaquePassManagerBuilder PMB, SWIGTYPE_p_LLVMOpaquePassManager PM) {
    PassManagerBuilderJNI.LLVMPassManagerBuilderPopulateFunctionPassManager(SWIGTYPE_p_LLVMOpaquePassManagerBuilder.getCPtr(PMB), SWIGTYPE_p_LLVMOpaquePassManager.getCPtr(PM));
  }

  public static void LLVMPassManagerBuilderPopulateModulePassManager(SWIGTYPE_p_LLVMOpaquePassManagerBuilder PMB, SWIGTYPE_p_LLVMOpaquePassManager PM) {
    PassManagerBuilderJNI.LLVMPassManagerBuilderPopulateModulePassManager(SWIGTYPE_p_LLVMOpaquePassManagerBuilder.getCPtr(PMB), SWIGTYPE_p_LLVMOpaquePassManager.getCPtr(PM));
  }

  public static void LLVMPassManagerBuilderPopulateLTOPassManager(SWIGTYPE_p_LLVMOpaquePassManagerBuilder PMB, SWIGTYPE_p_LLVMOpaquePassManager PM, boolean Internalize, boolean RunInliner) {
    PassManagerBuilderJNI.LLVMPassManagerBuilderPopulateLTOPassManager(SWIGTYPE_p_LLVMOpaquePassManagerBuilder.getCPtr(PMB), SWIGTYPE_p_LLVMOpaquePassManager.getCPtr(PM), Internalize, RunInliner);
  }

}
