[Test Plan]
- Fault Injection Test
	- T0: Checkpointing
		- Use ver5 with ABFT_ERROR_DETECT and ABFT_ERROR_RECOVER off
			- EXIT_ON_ERROR_DETECT is off.
		- done (2 results)
	- T1: ABFT (error detect + recovery)
		- Use ver4 with ABFT_ERROR_DETECT and ABFT_ERROR_RECOVER on
		- done (2 results)
	- T2: Checkpointing + ABFT(error detect)
		- Use ver5 with ABFT_ERROR_DETECT and EXIT_ON_ERROR_DETECT on
		- done (2 results)
	- T3: Checkpointing + ABFT(error detect + error recovery)
		- Use ver5 with ABFT_ERROR_DETECT and ABFT_ERROR_RECOVER on
			- EXIT_ON_ERROR_DETECT is off.
		- rerun (2 results)
	- T4: Selective Checkpointing + ABFT(error detect + error recovery)
		- Use ver5 with ABFT_ERROR_DETECT and ABFT_ERROR_RECOVER on
		- data to be checkpointed are selected based on their resilience.
		- Compare resilience coverage v.s. resilience overhead by
		varying data to be checkpointed.
	- T5: ABFT (error detect)
		- Use ver4 with ABFT_ERROR_DETECT on
		- done
	- T6: Checkpointing + ABFT(error detect + error recovery) + LXIM (error detect and recovery)
		- Use ver6 with ABFT_ERROR_DETECT, ABFT_ERROR_RECOVER, and LXIM_ERROR_DETECT on
			- EXIT_ON_ERROR_DETECT is off.
	- T7: Checkpointing + ABFT(error detect) + LXIM (error detect and recovery)
		- Use ver6 with ABFT_ERROR_DETECT, LXIM_ERROR_DETECT, and EXIT_ON_ERROR_DETECT on
	- T8: Checkpointing + ABFT(error detect + error recovery) + LXIM (error detect and recovery) + Checksum on nodalMass
		- Use ver8 with ABFT_ERROR_DETECT, ABFT_ERROR_RECOVER, LXIM_ERROR_DETECT, EXIT_ON_ERROR_DETECT, NMASS_CHECKSUM on
	- T9: Checkpointing + ABFT(error detect) + LXIM (error detect and recovery) + Checksum on nodalMass
		- Use ver8 with ABFT_ERROR_DETECT, LXIM_ERROR_DETECT, EXIT_ON_ERROR_DETECT, NMASS_CHECKSUM on
	- T10:  Checkpointing + ABFT(error detect) + LXIM(error detect + recovery) +nMassChecksum + online checkpointing
		- Use ver9 with ABFT_ERROR_DETECT, LXIM_ERROR_DETECT, EXIT_ON_ERROR_DETECT, NMASS_CHECKSUM on
	- T11:  Checkpointing + checksum error detect + online checkpointing
		- Use ver10 with EXIT_ON_ERROR_DETECT, CHECKSUM_ERROR_DETECT on
			(CHECKSUM_MODE = 0)
	- Comments
		- Repeat the above tests by varying checkpointing/ABFT frequency
		and/or output precision
- Resilience Overhead Test
	- Measure overhead of checkpointing
		- Total execution time, average checkpoint overhead
	- Measure ABFT overhead
		- error detect overhead, error recovery overhead

[Comments]
- Most of persistent data are written only in a specific execution phase.
If checksum is added before and after the write phase, checksum can detect
most soft errors in small overhead.
- Application checkpointing is lightweight since it stores user-selected 
data, fitting in memory. Combining app-checkpoint with the selective 
checksum enables light-weight fault-tolerance for a node.
- Remaining question is how to apply this to MPI version.



[LULESH Data-Flow Analysis]
 These variables are written to  
(defined) in the main loop. Those with a '*' are used as temporary 
variables and are initialized before use within a single iteration of  
the loop. Those without a '*' have loop carried flow (true) dependencies 
on variables from a prior loop iteration. Other variables in the program 
are used as local temporaries or are initialized at program start and 
are read-only thereafter. To preserve execution state, the minimal set 
of variables that must be checkpointed or made persistent are those 
without a '*'. 

Defined in main loop: * are temporary
                   e  //Initialized in AllocateElemPersistent() and main(), and written EvalEOSforElems()   
                   p  //Initialized in AllocateElemPersistent() and written EvalEOSforElems()
                   q  //written in EvalEOSforElems()
                  ql *
                  qq *
                   v   
                delv *
                vdov *
              arealg *
                  ss  
                   x   //Initiailzed in main() and written in CalcPositionForNodes()
                   y   //Initiailzed in main() and written in CalcPositionForNodes()
                   z   //Initiailzed in main() and written in CalcPositionForNodes()
                  xd   //Initialized in AllocateNodalPersistent() and written in CalcVelocityForNodes()  
                  yd   //Initialized in AllocateNodalPersistent() and written in CalcVelocityForNodes()  
                  zd   //Initialized in AllocateNodalPersistent() and written in CalcVelocityForNodes()  
                 xdd * //written in CalcAccelerationForNodes(), ApplyAccelerationBoundaryConditionsForNodes()
                 ydd * //written in CalcAccelerationForNodes(), ApplyAccelerationBoundaryConditionsForNodes()
                 zdd * //written in CalcAccelerationForNodes(), ApplyAccelerationBoundaryConditionsForNodes()
                  fx * //written in IntegrateStressForElems(), CalcFBHourglassForceForElems(), CalcForceForNodes()
                  fy * //written in IntegrateStressForElems(), CalcFBHourglassForceForElems(), CalcForceForNodes()
                  fz * //written in IntegrateStressForElems(), CalcFBHourglassForceForElems(), CalcForceForNodes()
                time
           deltatime
           dtcourant
             dthydro
               cycle

ReadOnly in main loop:
	lxim
	lxip
	letam
	letap
	lzetam
	lzetap
	elemBC
	matElemlist
	nodelist
	nodalMass

Temporary variables defined in main loop:
	dxx
	dyy
	dzz
	delv_xi
	delv_eta
	delv_zeta
	delx_xi
	delx_eta
	delx_zeta
	vnew

