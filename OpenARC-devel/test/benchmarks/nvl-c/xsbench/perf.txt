$ hostname
megatron.ftpn.ornl.gov
$ cat /etc/redhat-release
CentOS Linux release 7.2.1511 (Core)
$ git describe --always
nvl-c.hpdc2016-82-gfefb22d

$ git diff -U0 .
diff --git a/test/benchmarks/nvl-c/xsbench/XSbench_header.h b/test/benchmarks/nvl-c/xsbench/XSbench_header.h
index 4e53190..8d49ebc 100644
--- a/test/benchmarks/nvl-c/xsbench/XSbench_header.h
+++ b/test/benchmarks/nvl-c/xsbench/XSbench_header.h
@@ -40 +40,2 @@
-#define NVLFILE "_NVLFILEPATH_"
+//#define NVLFILE "_NVLFILEPATH_"
+#define NVLFILE "/opt/fio/scratch/jum/xsbench.nvl"

When I originally implemented automatic V-to-NV reference counting, adding
-reg2mem after -nvl-add-ref-counting in openarc-cc caused the performance
for the poor versions below to be the same as for the corresponding non-poor
versions. I did not determine why that was true, and I did not measure the
effect of that change on other benchmarks. I have not rechecked that result
on this benchmark recently.

-txs3, -txs2, and -txs1 are all the same because clobber and backup clauses
are never specified.

$ for i in `seq 1 5`; do echo "Iter $i"; rm -f /opt/fio/scratch/jum/xsbench.nvl && make run-xsbench-safe-refs-poor; done | grep 'Iter\|Runtime\|Lookups\/s'
Iter 1
Runtime:     26.787 seconds
Lookups/s:   559,982
Iter 2
Runtime:     27.136 seconds
Lookups/s:   552,763
Iter 3
Runtime:     26.666 seconds
Lookups/s:   562,520
Iter 4
Runtime:     27.072 seconds
Lookups/s:   554,083
Iter 5
Runtime:     27.083 seconds
Lookups/s:   553,855

$ for i in `seq 1 5`; do echo "Iter $i"; rm -f /opt/fio/scratch/jum/xsbench.nvl && make run-xsbench-safe-refs; done | grep 'Iter\|Runtime\|Lookups\/s'
Iter 1
Runtime:     24.923 seconds
Lookups/s:   601,843
Iter 2
Runtime:     24.616 seconds
Lookups/s:   609,367
Iter 3
Runtime:     25.012 seconds
Lookups/s:   599,716
Iter 4
Runtime:     24.544 seconds
Lookups/s:   611,154
Iter 5
Runtime:     24.928 seconds
Lookups/s:   601,722

$ for i in `seq 1 5`; do echo "Iter $i"; rm -f /opt/fio/scratch/jum/xsbench.nvl && make run-xsbench-safe-refs-txs1-poor; done | grep 'Iter\|Runtime\|Lookups\/s'
Iter 1
Runtime:     27.155 seconds
Lookups/s:   552,390
Iter 2
Runtime:     27.193 seconds
Lookups/s:   551,622
Iter 3
Runtime:     26.975 seconds
Lookups/s:   556,079
Iter 4
Runtime:     27.026 seconds
Lookups/s:   555,027
Iter 5
Runtime:     27.041 seconds
Lookups/s:   554,709

$ for i in `seq 1 5`; do echo "Iter $i"; rm -f /opt/fio/scratch/jum/xsbench.nvl && make run-xsbench-safe-refs-txs1; done | grep 'Iter\|Runtime\|Lookups\/s'
Iter 1
Runtime:     25.158 seconds
Lookups/s:   596,233
Iter 2
Runtime:     24.891 seconds
Lookups/s:   602,624
Iter 3
Runtime:     24.881 seconds
Lookups/s:   602,860
Iter 4
Runtime:     25.005 seconds
Lookups/s:   599,868
Iter 5
Runtime:     25.014 seconds
Lookups/s:   599,652



Adding the following shows that all allocations are freed in all of
the above cases:

diff --git a/test/benchmarks/nvl-c/xsbench/Main.c
b/test/benchmarks/nvl-c/xsbench/Main.c
index 0a7c836..2f405b5 100644
--- a/test/benchmarks/nvl-c/xsbench/Main.c
+++ b/test/benchmarks/nvl-c/xsbench/Main.c
@@ -20,6 +20,9 @@ nvl_heap_t *heap = 0;
 nvl_vheap_t *vheap = 0;
 #endif
 
+size_t nvlrt_get_numAllocNV();
+size_t nvlrt_get_numFreeNV();
+
 int main(int argc, char* argv[])
 {
        // =====================================================================
@@ -388,6 +391,9 @@ int main(int argc, char* argv[])
        #endif
 
 #if MEM == NVL
+        nvl_set_root(heap, 0);
+        printf("nallocs=%zu\n", nvlrt_get_numAllocNV());
+        printf("nfrees=%zu\n", nvlrt_get_numFreeNV());
        nvl_close(heap);
 #elif MEM == VHEAP
        nvl_vfree(vheap, nuclide_grids);



To check overhead of automatic reference counting:

$ for i in `seq 1 5`; do echo "Iter $i"; rm -f /opt/fio/scratch/jum/xsbench.nvl && make run-xsbench-safe-norefs-poor; done | grep 'Iter\|Runtime\|Lookups\/s'
Iter 1
Runtime:     24.357 seconds
Lookups/s:   615,827
Iter 2
Runtime:     24.741 seconds
Lookups/s:   606,275
Iter 3
Runtime:     24.689 seconds
Lookups/s:   607,553
Iter 4
Runtime:     24.694 seconds
Lookups/s:   607,439
Iter 5
Runtime:     24.401 seconds
Lookups/s:   614,730



To enable verification:

diff --git a/test/benchmarks/nvl-c/xsbench/Makefile b/test/benchmarks/nvl-c/xsbench/Makefile
index 8b97be8..e0c2b07 100644
--- a/test/benchmarks/nvl-c/xsbench/Makefile
+++ b/test/benchmarks/nvl-c/xsbench/Makefile
@@ -12 +12 @@ CFLAGS = -O3 -I. \
-       -DITERS_PER_TX=$(ITERS_PER_TX)
+       -DITERS_PER_TX=$(ITERS_PER_TX) -DVERIFICATION=1

$ for i in `seq 1 3`; do echo "Iter $i"; rm -f /opt/fio/scratch/jum/xsbench.nvl && make run-xsbench-safe-refs-poor; done | grep 'Iter\|Runtime\|Lookups\/s\|Verification'
Iter 1
Verification Mode:            on
Runtime:     47.309 seconds
Lookups/s:   317,065
Verification checksum: 74987021546
Iter 2
Verification Mode:            on
Runtime:     48.157 seconds
Lookups/s:   311,478
Verification checksum: 74987021546
Iter 3
Verification Mode:            on
Runtime:     47.307 seconds
Lookups/s:   317,079
Verification checksum: 74987021546

$ for i in `seq 1 3`; do echo "Iter $i"; rm -f /opt/fio/scratch/jum/xsbench.nvl && make run-xsbench-safe-refs-txs1-poor; done | grep 'Iter\|Runtime\|Lookups\/s\|Verification'
Iter 1
Verification Mode:            on
Runtime:     47.651 seconds
Lookups/s:   314,788
Verification checksum: 74987021546
Iter 2
Verification Mode:            on
Runtime:     47.598 seconds
Lookups/s:   315,140
Verification checksum: 74987021546
Iter 3
Verification Mode:            on
Runtime:     48.211 seconds
Lookups/s:   311,133
Verification checksum: 74987021546



Automatic Shadow Updates
------------------------

Shadow updates are not performed because the only writes to NVM within the
transactions are for vhash and i, which, according to our cost model, are
far too small for shadow updates to be worthwhile.

Because our automatic shadow update implementation does not currently
support allocations containing pointers (vhash and i are part of struct
root, which also contains pointers), we cannot measure the execution time of
xsbench with automatic shadow updates.
