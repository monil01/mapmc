#!/usr/bin/env perl

package Cfg;

use warnings;
use strict;

# Each cmd below is run for each row value many times each time this
# script is called. The number of runs is determined by the following
# conditions, where $minRuns has priority over the other two.
our $minRuns = 5;
our $maxRuns = 1000;
our $maxMinutes = 30;

# How many significant digits should values keep?
our $sigDigits = 3;

my $is_pmem = 0;

my $nvlFile = "/opt/fio/scratch/jum/jacobi.nvl";

our @cmds = (
  # ID, compileShell, runShell
  # Shell code can access the row value via the environment variable $ROW.
  ["undo",
   "make --always-make SIZE=\$ROW"
   ."    SHADOW_UPDATE_COST_MODE=NVLRT_COST_INFINITE jacobi-safe-refs-txs1",
   "rm -f $nvlFile"
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem run-jacobi-safe-refs-txs1"],
  ["shdw",
   "make --always-make SIZE=\$ROW"
   ."    SHADOW_UPDATE_COST_MODE=NVLRT_COST_ZERO jacobi-safe-refs-txs1",
   "rm -f $nvlFile"
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem run-jacobi-safe-refs-txs1"],
  ["sbwf",
   "make --always-make SIZE=\$ROW"
   ."    SHADOW_UPDATE_COST_MODE=NVLRT_COST_ZERO jacobi-safe-refs-txs4",
   "rm -f $nvlFile"
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem run-jacobi-safe-refs-txs4"],
  ["auto",
   "make --always-make SIZE=\$ROW"
   ."    SHADOW_UPDATE_COST_MODE=NVLRT_COST_DEFAULT jacobi-safe-refs-txs1",
   "rm -f $nvlFile"
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem run-jacobi-safe-refs-txs1"],
  ["abwf",
   "make --always-make SIZE=\$ROW"
   ."    SHADOW_UPDATE_COST_MODE=NVLRT_COST_DEFAULT jacobi-safe-refs-txs4",
   "rm -f $nvlFile"
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem run-jacobi-safe-refs-txs4"],
);

our @formats = (
  # The update ID of a mode "~" cell must be the ID of a mode "~" cell
  # (possibly itself) that has the same cmd ID. The former cell updates iff
  # the latter cell's new value is smaller than the latter cell's old value,
  # which is considered to be infinite if it does not exist. If the update
  # ID is undef, it's assumed to be the cell's own ID, which must not be
  # undef.
  #
  # Any regex can escape $Run::valRegex to be expanded later as a regex that
  # matches well-formed integer and floating point values.
  #
  # Mode "~" cell regexes must capture one value.
  #
  # Mode "?~" cell regexes can escape $Run::v{$cellID} to be expanded later
  # as the value of a mode "r" cell whose cell ID is $cellID.
  #
  # Mode "=" cell formulas can escape $Run::v{$cellID} to be expanded later
  # as the value of a mode "r" cell or any preceding cell (preceding the
  # mode "=" cell) whose ID is $cellID. Referring to following cells that
  # are not mode "r" can produce incorrect values.
  #
  # Rows are guaranteed to be sorted by mode "r" cells in descending order
  # before mode "-" cells are computed.
  #
  # mode
  # "r",  ID,         title
  # "|"
  # "~",  ID,         title,       cmdID,       updateID,    regex
  # "?~",                          cmdID,                    regex
  # "=",  ID,         title,       formula, [conversion]
  # "-", fn, titles, xColID, yColIDs, [conversion]
  ["r",  "SIZE",      "SIZE"],
  ["|"],
  ["?~",                           "undo",                   '^Performing 100 iterations on a $Run::v{"SIZE"} by $Run::v{"SIZE"} array$'],
  ["?~",                           "undo",                   "^\\(NVL mode, is_pmem=$is_pmem, tx mode=1, ITERS_PER_TX=1\\)\$"],
  ["~",  "undo",      "undo(s)",   "undo",      undef,       '^NVM Elapsed time = ($Run::valRegex) sec$'],
  ["~",  undef,       "add(s)",    "undo",      "undo",      '^  tx add time = ($Run::valRegex) sec$'],
  ["?~",                           "undo",                   '^  shadow update alloc time = 0.000000 sec$'],
  ["?~",                           "undo",                   '^Verification Successful err = 0.000000e\+00$'],
  ["|"],
  ["?~",                           "shdw",                   '^Performing 100 iterations on a $Run::v{"SIZE"} by $Run::v{"SIZE"} array$'],
  ["?~",                           "sbwf",                   '^Performing 100 iterations on a $Run::v{"SIZE"} by $Run::v{"SIZE"} array$'],
  ["?~",                           "shdw",                   "^\\(NVL mode, is_pmem=$is_pmem, tx mode=1, ITERS_PER_TX=1\\)\$"],
  ["?~",                           "sbwf",                   "^\\(NVL mode, is_pmem=$is_pmem, tx mode=4, ITERS_PER_TX=1\\)\$"],
  ["~",  "shdw",      "shdw(s)",   "shdw",      undef,       '^NVM Elapsed time = ($Run::valRegex) sec$'],
  ["~",  "sbwf",      "[]",        "sbwf",      undef,       '^NVM Elapsed time = ($Run::valRegex) sec$'],
  ["~",  undef,       "add(s)",    "shdw",      "shdw",      '^  tx add time = ($Run::valRegex) sec$'],
  ["~",  undef,       "[]",        "sbwf",      "sbwf",      '^  tx add time = ($Run::valRegex) sec$'],
  ["~",  undef,       "alloc(s)",  "shdw",      "shdw",      '^  shadow update alloc time = ($Run::valRegex) sec$'],
  ["~",  undef,       "[]",        "sbwf",      "sbwf",      '^  shadow update alloc time = ($Run::valRegex) sec$'],
  ["?~",                           "shdw",                   '^Verification Successful err = 0.000000e\+00$'],
  ["?~",                           "sbwf",                   '^Verification Successful err = 0.000000e\+00$'],
  ["|"],
  ["=",  undef,       "shdw/undo", '$Run::v{"shdw"}/$Run::v{"undo"}'],
  ["=",  undef,       "[]",        '$Run::v{"sbwf"}/$Run::v{"undo"}'],
  ["|"],
  ["?~",                           "auto",                   '^Performing 100 iterations on a $Run::v{"SIZE"} by $Run::v{"SIZE"} array$'],
  ["?~",                           "abwf",                   '^Performing 100 iterations on a $Run::v{"SIZE"} by $Run::v{"SIZE"} array$'],
  ["?~",                           "auto",                   "^\\(NVL mode, is_pmem=$is_pmem, tx mode=1, ITERS_PER_TX=1\\)\$"],
  ["?~",                           "abwf",                   "^\\(NVL mode, is_pmem=$is_pmem, tx mode=4, ITERS_PER_TX=1\\)\$"],
  ["~",  "auto",      "auto(s)",   "auto",      undef,       '^NVM Elapsed time = ($Run::valRegex) sec$'],
  ["~",  "abwf",      "[]",        "abwf",      undef,       '^NVM Elapsed time = ($Run::valRegex) sec$'],
  ["~",  undef,       "add(s)",    "auto",      "auto",      '^  tx add time = ($Run::valRegex) sec$'],
  ["~",  undef,       "[]",        "abwf",      "abwf",      '^  tx add time = ($Run::valRegex) sec$'],
  ["~",  undef,       "alloc(s)",  "auto",      "auto",      '^  shadow update alloc time = ($Run::valRegex) sec$'],
  ["~",  undef,       "[]",        "abwf",      "abwf",      '^  shadow update alloc time = ($Run::valRegex) sec$'],
  ["?~",                           "auto",                   '^Verification Successful err = 0.000000e\+00$'],
  ["?~",                           "abwf",                   '^Verification Successful err = 0.000000e\+00$'],
  ["|"],
);
