$ hostname
megatron.ftpn.ornl.gov
$ cat /etc/redhat-release
CentOS Linux release 7.2.1511 (Core)
$ git describe --always
nvl-c.hpdc2016-82-gfefb22d

$ git diff -U0 .
diff --git a/test/benchmarks/nvl-c/kernels/jacobi-shadow-updates/jacobi.c b/test/benchmarks/nvl-c/kernels/jacobi-shadow-updates/jacobi.c
index 1e47220..e379d8c 100644
--- a/test/benchmarks/nvl-c/kernels/jacobi-shadow-updates/jacobi.c
+++ b/test/benchmarks/nvl-c/kernels/jacobi-shadow-updates/jacobi.c
@@ -44 +44,2 @@
-#define NVLFILE "_NVLFILEPATH_"
+//#define NVLFILE "_NVLFILEPATH_"
+#define NVLFILE "/opt/fio/scratch/jum/jacobi.nvl"

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs
Performing 1000 iterations on a 4096 by 4096 array
(NVL mode, txs disabled)
-------------------------------------------------------------
NVM Elapsed time = 42.139866 sec
Volatile Memory Elapsed time = 45.952258 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 4.9475250244E+01

With txs2 or txs1 (below), NVM elapsed time often reaches as high as ~180s.

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs-txs2
Performing 1000 iterations on a 4096 by 4096 array
(NVL mode, tx mode=2, ITERS_PER_TX=1)
-------------------------------------------------------------
NVM Elapsed time = 155.098355 sec
  tx add time  = 36.481173 sec
  shadow update alloc time  = 0.632245 sec
Volatile Memory Elapsed time = 45.940407 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 4.9475250244E+01

Setting ITERS_PER_TX=100 in Makefile and rebuilding shows that transaction
overhead can still be amortized fairly well, as in ../jacobi-txs-amortized:

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs-txs2
Performing 1000 iterations on a 4096 by 4096 array
(NVL mode, tx mode=2, ITERS_PER_TX=100)
-------------------------------------------------------------
NVM Elapsed time = 43.317697 sec
  tx add time  = 0.381452 sec
  shadow update alloc time  = 0.006687 sec
Volatile Memory Elapsed time = 45.883133 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 4.9475250244E+01



To check tx.add hoisting:

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs-txs1
Performing 1000 iterations on a 4096 by 4096 array
(NVL mode, tx mode=1, ITERS_PER_TX=1)
-------------------------------------------------------------
NVM Elapsed time = 153.096792 sec
  tx add time  = 34.861409 sec
  shadow update alloc time  = 0.632375 sec
Volatile Memory Elapsed time = 45.698860 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 4.9475250244E+01



Adding the following shows that all allocations are freed in all of
the above cases:

diff --git a/test/benchmarks/nvl-c/kernels/jacobi-shadow-updates/jacobi.c b/test/benchmarks/nvl-c/kernels/jacobi-shadow-updates/jacobi.c
index 25a7792..e8a6e86 100644
--- a/test/benchmarks/nvl-c/kernels/jacobi-shadow-updates/jacobi.c
+++ b/test/benchmarks/nvl-c/kernels/jacobi-shadow-updates/jacobi.c
@@ -72,2 +73,5 @@ struct root {
 
+size_t nvlrt_get_numAllocNV();
+size_t nvlrt_get_numFreeNV();
+
 int main (int argc, char *argv[])
@@ -368,2 +372,5 @@ int main (int argc, char *argv[])
 #if MEM == NVL
+        nvl_set_root(heap, 0);
+        printf("nallocs=%zu\n", nvlrt_get_numAllocNV());
+        printf("nfrees=%zu\n", nvlrt_get_numFreeNV());
        nvl_close(heap);



To check overhead of automatic reference counting:

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-norefs
Performing 1000 iterations on a 4096 by 4096 array
(NVL mode, txs disabled)
-------------------------------------------------------------
NVM Elapsed time = 42.358612 sec
Volatile Memory Elapsed time = 46.016607 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 4.9475250244E+01



Automatic Shadow Updates
------------------------

For a detailed discussion of automatic shadow update results for this
version of jacobi, see our submission to CGO'17.

The results below were collected at various stages of development of NVL-C's
automatic shadow update implementation, so many are out of date.

ITER=100, ITERS_PER_TX=1, where:
- Command line for unbracketed values is:

  $ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs-txs1

- bracketed values are when backup_writeFirst is used, so the command line
  is then:

  $ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs-txs4

- undo means shadow updates are disabled (by modifying nvlrt-pmemobj's
  nvlrt_tx_tryShadowUpdate to return nvlrt_v2nv_null)
- shdw means shadow updates are enabled when possible regardless of cost (by
  calling nvlrt_setShadowUpdateCostMode(NVLRT_COST_ZERO))
- add is the total time spent in nvlrt_tx_add calls
- alloc is the total time spent in nvlrt_alloc_nv calls within shadow
  updates, so add includes alloc

SIZE |undo(s)            add(s)          |shdw(s)           add(s)         alloc(s)      |shdw/undo
-----+-----------------------------------+-----------------------------------------------+------------
32768|1130    [1130    ] 543    [518    ]|1040    [629    ] 442    [0.434] 0.129 [0.124 ]|0.920[0.557]
16384| 348    [ 346    ] 164    [160    ]| 218    [184    ]  56.6  [0.219] 0.0687[0.0728]|0.626[0.532]
 8192|  90.0  [  90.1  ]  41.9  [ 40.9  ]|  55.3  [ 47.9  ]  14.3  [0.228] 0.0676[0.0748]|0.614[0.532]
 4096|  23.7  [  24.0  ]  10.9  [ 10.9  ]|  14.6  [ 12.7  ]   3.71 [0.211] 0.0627[0.0651]|0.616[0.529]
 2048|   5.91 [   5.98 ]   2.70 [  2.76 ]|   3.87 [  3.38 ]   1.01 [0.197] 0.0592[0.0606]|0.655[0.565]
 1024|   1.49 [   1.51 ]   0.674[  0.683]|   1.15 [  1.02 ]   0.372[0.187] 0.0589[0.0582]|0.772[0.675]
  768|   0.844[   0.871]   0.380[  0.394]|   0.744[  0.685]   0.283[0.188] 0.0621[0.0591]|0.882[0.786]
  640|   0.597[   0.607]   0.269[  0.282]|   0.567[  0.542]   0.239[0.185] 0.0583[0.0580]|0.950[0.893]
  608|   0.536[   ?    ]   0.237[  ?    ]|   0.532[  ?    ]   0.231[?    ] 0.0578[?     ]|0.993[?    ]
  576|   0.495[   0.497]   0.223[  0.231]|   0.509[  0.486]   0.228[0.184] 0.0586[0.0578]|1.03 [0.978]
  544|   ?    [   0.483]   ?    [  0.218]|   ?    [  0.482]   ?    [0.186] ?     [0.0585]|?    [0.998]
  512|   0.426[   0.426]   0.197[  0.198]|   0.485[  0.451]   0.232[0.189] 0.0622[0.0592]|1.14 [1.06 ]

ITER=100, ITERS_PER_TX=1, PMEM_IS_PMEM_FORCE=1, where:
- nocp means with shadow updates that do not perform memcpy, so verification
  fails.
- bracketed times are those when we adjust the nvlrt_alloc_nv call in
  shadow updates to skip initialization.

SIZE |undo(s)   add(s)|shdw(s)  add(s) alloc(s)|nocp(s)   add(s) alloc(s)|shdw/undo nocp/undo nocp/shdw
-----+----------------+------------------------+-------------------------+-----------------------------
32768|1260            |1450            254     |1220             249     |1.15      0.968     0.841
16384| 220            | 238             22.8   | 215              25.2   |1.08      0.977     0.903
 8192|  52.7    7.37  |  57.6   12.3     4.85  |  49.9    4.79     4.79  |1.09      0.947     0.866
 4096|  12.7          |  14.1            1.13  |  12.1             1.14  |1.11      0.953     0.858
 2048|   2.98         |   3.31           0.286 |   2.80            0.287 |1.11      0.940     0.846
 1536|   1.52         |   1.75           0.163 |   1.43            0.161 |1.15      0.941     0.817
 1024|   0.533        |   0.636                |   0.509                 |1.19      0.955     0.800
  512|   0.137        |   0.150                |   0.129                 |1.09      0.942\    0.860
  384|   0.0803       |   0.0885               |   0.0807                |1.10      1.00 |    0.912
  256|   0.0684       |   0.0858               |   0.0774                |1.25      1.13 /    0.902

ITERS_PER_TX=1, ITER=1000, PMEM_IS_PMEM_FORCE=1:

SIZE |undo(s)  add(s)   |shdw(s)        add(s)         alloc(s)         |nocp(s)         add(s)         alloc(s)        |shdw/undo  nocp/undo    nocp/shdw
-----+------------------+-----------------------------------------------+-----------------------------------------------+---------------------------------
32768|12100             |14300                                          |12000[9060]         [0.0539]       [0.0272]    |1.18       0.992[0.749] 0.839
16384| 2220@            | 2330[2240]       [354]            [0.0165]    | 2100[1870]         [0.0244]       [0.0111]    |1.05[1.01] 0.946[0.842] 0.901[0.835]
 8192|  544     69.9    |  594[548]     120[75.6]       47.0[0.00987]   |  483[460]      45.4[0.0232]   45.4[0.00978]   |1.09[1.01] 0.888[0.846] 0.813[0.839]
 4096|  138     17.0    |  150[139]      29.1[18.2]     11.0[0.00901]   |  121[114]      11.1[0.0223]   11.1[0.00839]   |1.09[1.01] 0.877[0.826] 0.807[0.820]
 2048|   33.8    4.23   |   37.2[34.4]    7.27[4.56]     2.76[0.00936]  |   27.8[26.8]    2.77[0.0223]   2.76[0.00937]  |1.10[1.02] 0.822[0.793] 0.747[0.779]
 1536|   18.0           |                                               |   14.3                                        |           0.794
 1280|   11.7           |                                               |    8.91                                       |           0.762
 1248|   10.9           |                                               |    8.04                                       |           0.738 \  
 1232|   10.5           |                                               |    7.96                                       |           0.758 |  
 1216|   10.2           |                                               |    7.55                                       |           0.740 /  
 1152|    8.88          |                                               |    6.60                                       |           0.743
 1024|    6.77   1.04   |    7.80[7.07]   1.68[0.941]    0.618[0.00774] |    5.07[5.08]   0.732[0.0175]  0.721[0.00622] |1.15[1.04] 0.749[0.750] 0.650[0.719]
  768|    3.74   0.583  |                                               |        [3.03]        [0.0141]       [0.00436] |                [0.810]
  640|    2.50          |    2.91                                       |    2.10[2.14]        [0.0141]       [0.00433] |1.16       0.840[0.856] 0.722
  576|    1.96   0.329  |                                               |        [1.84]        [0.0139]       [0.00426] |                [0.939]
  544|    1.72   0.295  |                                               |        [1.53]        [0.0141]       [0.00433] |                [0.890]
  528|    1.60   0.278  |                                               |        [1.53]        [0.0141]       [0.00438] |                [0.956]
  520|    1.55   0.271  |                                               |        [1.53]        [0.0141]       [0.00433] |                [0.987]\
  516|    1.52   0.267  |                                               |        [1.53]        [0.0146]       [0.00450] |                [1.01] /
  512|    1.49   0.262  |    1.61[1.70]   0.235[0.163]   0.0711[0.00431]|    1.27[1.53]   0.130[0.0140]  0.120[0.00429] |1.08[1.14] 0.852[1.03]  0.789[0.900]
  320|    0.539         |    0.582                                      |    0.530[0.596]      [0.0145]       [0.00444] |1.08       0.983[1.11]  0.911
  316|    0.526         |                                               |    0.525[0.596]      [0.0141]       [0.00435] |           0.998 \ [1.13]
  315|    0.521         |                                               |    0.525[0.597]      [0.0142]       [0.00435] |           1.01  / [1.15]
  314|    0.521         |                                               |    0.524                                      |           1.01
  312|    0.514         |                                               |    0.523                                      |           1.02
  304|    0.487         |                                               |    0.515                                      |           1.06
  288|    0.440         |                                               |    0.573                                      |           1.14
  256|    0.350  0.0688 |    0.498[0.639] 0.0752[0.0434] 0.0365[0.00431]|    0.473[0.615] 0.0589[0.0140] 0.0492[0.00432]|1.42[1.83] 1.35[1.76]   0.950[0.962]
  128|    0.0959 0.0188 |         [0.139]       [0.0213]       [0.00422]|                                               |    [1.45]
   32|    0.0185 0.00694|         [0.0274]      [0.0158]       [0.00459]|                                               |    [1.48]
   16|    0.0252 0.0106 |         [0.0240]      [0.0162]       [0.00477]|                                               |    [0.952]
    8|    0.0223 0.0101 |         [0.0242]      [0.0164]       [0.00477]|                                               |    [1.09]

Again but on /opt/rd/scratch/jum/jacobi.nvl. Nothing I measured changed
noticeably, so apparently OS page buffering does an excellent job of hiding
the underlying hardware (SSD or ramdisk) performance:

SIZE |undo(s)   add(s)|shdw(s)   add(s) alloc(s)|nocp(s)   add(s) alloc(s)|shdw/undo nocp/undo nocp/shdw
-----+----------------+-------------------------+-------------------------+-----------------------------
 8192|  537           |  584                    |  490                    |1.09      0.912     0.839
 4096|  138           |  149                    |  120                    |1.08      0.870     0.805
 2048|   33.8   4.20  |   37.1   7.22   2.72    |   27.7   2.73   2.72    |1.10      0.820     0.747
 1024|    6.74        |    7.77                 |    5.08                 |1.15      0.754     0.654
  512|    1.49        |    1.60                 |    1.27                 |1.07      0.852\    0.794
  256|    0.349       |    0.497                |    0.473                |1.42      1.36 /    0.952
