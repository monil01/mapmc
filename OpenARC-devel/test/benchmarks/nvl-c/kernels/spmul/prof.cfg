#!/usr/bin/env perl

package Cfg;

use warnings;
use strict;

# Each cmd below is run for each row value many times each time this
# script is called. The number of runs is determined by the following
# conditions, where $minRuns has priority over the other two.
our $minRuns = 3;
our $maxRuns = 100;
our $maxMinutes = 30;

# How many significant digits should values keep?
our $sigDigits = 3;

my $is_pmem = 0;

my $nvlFile = "/opt/fio/scratch/jum/spmul.nvl";

# After you edit ./spmul.c to select a data set, you must set $xsum below
# correctly for that data set, and you must run prof.cfg only with ROW as
# the correct SIZE for that data set.
#
# There are several steps to setting up a new data set:
#
# 1. Set the following environment variable and copy the new data set to the
#    specified directory:
#
#      $ export spmulinput=/opt/proj-local/jum/spmul-input
#
#    Normally, you can copy the data set from /home/f6l/SPMULInput. Or, if
#    it's not there, then you might be able to download it from:
#
#      http://www.cise.ufl.edu/research/sparse/matrices/
#
#    However, the format there is .rb not .rbC as expected by spmul.c. To
#    convert, just strip away the header (everything before the long columns
#    of integers) except the NROWS, NCOLS, and NZR values. The correct
#    values are listed at the website and should already appear in the
#    header (just for fun, the website is sometimes wrong). The NZR value
#    might be different than what's recorded in spmul.c for that data set,
#    so you might need to adjust spmul.c. In spmul.c, NROWS and NCOLS are
#    called SIZE and SIZE2 and must be equal. Chapter 3 of the following has
#    a reference on the .rb format:
#
#      http://www.scd.stfc.ac.uk/SCD/resources/reports/duglRAL97031.pdf
#
# 2. To determine the $xsum value for the new data set, use the openacc
#    version of spmul as an oracle:
#
#      $ cd ../../../openacc/kernels/spmul
#
#    Edit spmul.c to select the data set and adjust its NZR if necessary:
#
#      $ ./O2GBuild.script # spmulinput must be set here
#      $ SPMUL_INPUTDIR=$spmulinput/ make spmul_CPU
#      $ ./bin/spmul_CPU
#
#    Specify $xsum below.

my $xsum = "4.969705937500E+05";  # nlpkkt240.rbC
#my $xsum = "5.631934765625E+04";  # rajat31.rbC
#my $xsum = "1.333440000000E+05";  # kkt_power.rbC
#my $xsum = "-4.832867126465E+02"; # af_shell10.rbC
#my $xsum = "-1.361712493896E+02"; # hood.rbC
#my $xsum = "-3.725532531738E+01"; # af23560.rbC

our @cmds = (
  # ID, compileShell, runShell
  # Shell code can access the row value via the environment variable $ROW.
  ["notx",
   "make --always-make spmul",
   "rm -f $nvlFile && make PMEM_IS_PMEM_FORCE=$is_pmem run-spmul"],
  ["undo",
   "make --always-make SHADOW_UPDATE_COST_MODE=NVLRT_COST_INFINITE"
   ."    spmul-txs1",
   "rm -f $nvlFile && make PMEM_IS_PMEM_FORCE=$is_pmem run-spmul-txs1"],
  ["shdw",
   "make --always-make SHADOW_UPDATE_COST_MODE=NVLRT_COST_ZERO"
   ."    spmul-txs1",
   "rm -f $nvlFile && make PMEM_IS_PMEM_FORCE=$is_pmem run-spmul-txs1"],
  ["sbwf",
   "make --always-make SHADOW_UPDATE_COST_MODE=NVLRT_COST_ZERO"
   ."    spmul-txs4",
   "rm -f $nvlFile && make PMEM_IS_PMEM_FORCE=$is_pmem run-spmul-txs4"],
  ["auto",
   "make --always-make SHADOW_UPDATE_COST_MODE=NVLRT_COST_DEFAULT"
   ."    spmul-txs1",
   "rm -f $nvlFile && make PMEM_IS_PMEM_FORCE=$is_pmem run-spmul-txs1"],
  ["abwf",
   "make --always-make SHADOW_UPDATE_COST_MODE=NVLRT_COST_DEFAULT"
   ."    spmul-txs4",
   "rm -f $nvlFile && make PMEM_IS_PMEM_FORCE=$is_pmem run-spmul-txs4"],
);

our @formats = (
  # The update ID of a mode "~" cell must be the ID of a mode "~" cell
  # (possibly itself) that has the same cmd ID. The former cell updates iff
  # the latter cell's new value is smaller than the latter cell's old value,
  # which is considered to be infinite if it does not exist. If the update
  # ID is undef, it's assumed to be the cell's own ID, which must not be
  # undef.
  #
  # Any regex can escape $Run::valRegex to be expanded later as a regex that
  # matches well-formed integer and floating point values.
  #
  # Mode "~" cell regexes must capture one value.
  #
  # Mode "?~" cell regexes can escape $Run::v{$cellID} to be expanded later
  # as the value of a mode "r" cell whose cell ID is $cellID.
  #
  # Mode "=" cell formulas can escape $Run::v{$cellID} to be expanded later
  # as the value of a mode "r" cell or any preceding cell (preceding the
  # mode "=" cell) whose ID is $cellID. Referring to following cells that
  # are not mode "r" can produce incorrect values.
  #
  # Rows are guaranteed to be sorted by mode "r" cells in descending order
  # before mode "-" cells are computed.
  #
  # mode
  # "r",  ID,        title
  # "|"
  # "~",  ID,        title,               cmdID,       updateID,    regex
  # "?~",                                 cmdID,                    regex
  # "=",  ID,        title,               formula, [conversion]
  # "-", fn, titles, xColID, yColIDs, [conversion]
  ["?~",                                  "notx",                   "^\\(is_pmem=$is_pmem, tx mode=0\\)\$"],
  ["?~",                                  "undo",                   "^\\(is_pmem=$is_pmem, tx mode=1, ITERS_PER_TX=1\\)\$"],
  ["?~",                                  "shdw",                   "^\\(is_pmem=$is_pmem, tx mode=1, ITERS_PER_TX=1\\)\$"],
  ["?~",                                  "sbwf",                   "^\\(is_pmem=$is_pmem, tx mode=4, ITERS_PER_TX=1\\)\$"],
  ["?~",                                  "auto",                   "^\\(is_pmem=$is_pmem, tx mode=1, ITERS_PER_TX=1\\)\$"],
  ["?~",                                  "abwf",                   "^\\(is_pmem=$is_pmem, tx mode=4, ITERS_PER_TX=1\\)\$"],

  ["r",  "SIZE",     "SIZE"],
  ["?~",                                  "notx",                  '^Performing 100 iterations with SIZE=$Run::v{"SIZE"}$'],
  ["?~",                                  "undo",                  '^Performing 100 iterations with SIZE=$Run::v{"SIZE"}$'],
  ["?~",                                  "shdw",                  '^Performing 100 iterations with SIZE=$Run::v{"SIZE"}$'],
  ["?~",                                  "sbwf",                  '^Performing 100 iterations with SIZE=$Run::v{"SIZE"}$'],
  ["?~",                                  "auto",                  '^Performing 100 iterations with SIZE=$Run::v{"SIZE"}$'],
  ["?~",                                  "abwf",                  '^Performing 100 iterations with SIZE=$Run::v{"SIZE"}$'],

  ["|"],
  ["~",  "notx",     "notx(s)",           "notx",      undef,      '^Computation time = ($Run::valRegex) seconds$'],
  ["~",  "notxTot",  "[]",                "notx",      undef,      '^Total time = ($Run::valRegex) seconds$'],
  ["~",  "undo",     "undo(s)",           "undo",      undef,      '^Computation time = ($Run::valRegex) seconds$'],
  ["~",  "undoTot",  "[]",                "undo",      undef,      '^Total time = ($Run::valRegex) seconds$'],
  ["~",  "shdw",     "shdw(s)",           "shdw",      undef,      '^Computation time = ($Run::valRegex) seconds$'],
  ["~",  "shdwTot",  "[]",                "shdw",      undef,      '^Total time = ($Run::valRegex) seconds$'],
  ["~",  "sbwf",     "sbwf(s)",           "sbwf",      undef,      '^Computation time = ($Run::valRegex) seconds$'],
  ["~",  "sbwfTot",  "[]",                "sbwf",      undef,      '^Total time = ($Run::valRegex) seconds$'],
  ["|"],
  ["=",  undef,      "undo/notx",         '$Run::v{"undo"}/$Run::v{"notx"}'],
  ["=",  undef,      "shdw/undo",         '$Run::v{"shdw"}/$Run::v{"undo"}'],
  ["=",  undef,      "sbwf/undo",         '$Run::v{"sbwf"}/$Run::v{"undo"}'],
  ["|"],
  ["~",  "auto",     "auto(s)",           "auto",      undef,      '^Computation time = ($Run::valRegex) seconds$'],
  ["~",  "autoTot",  "[]",                "auto",      undef,      '^Total time = ($Run::valRegex) seconds$'],
  ["~",  "abwf",     "abwf(s)",           "abwf",      undef,      '^Computation time = ($Run::valRegex) seconds$'],
  ["~",  "abwfTot",  "[]",                "abwf",      undef,      '^Total time = ($Run::valRegex) seconds$'],

  ["?~",                                  "notx",                  "^101: x_sum = \Q$xsum\E\$"],
  ["?~",                                  "undo",                  "^101: x_sum = \Q$xsum\E\$"],
  ["?~",                                  "shdw",                  "^101: x_sum = \Q$xsum\E\$"],
  ["?~",                                  "sbwf",                  "^101: x_sum = \Q$xsum\E\$"],
  ["?~",                                  "auto",                  "^101: x_sum = \Q$xsum\E\$"],
  ["?~",                                  "abwf",                  "^101: x_sum = \Q$xsum\E\$"],
);
