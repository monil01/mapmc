$ hostname
megatron.ftpn.ornl.gov
$ cat /etc/redhat-release
CentOS Linux release 7.2.1511 (Core)
$ git describe --always
nvl-c.hpdc2016-82-gfefb22d

$ git diff -U0 .
diff --git a/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c b/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c
index 86be415..fed70cf 100644
--- a/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c
+++ b/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c
@@ -43 +43,2 @@
-#define NVLFILE "_NVLFILEPATH_"
+//#define NVLFILE "_NVLFILEPATH_"
+#define NVLFILE "/opt/fio/scratch/jum/jacobi.nvl"

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs-poor
Performing 1000 iterations on a 4096 by 4096 array
-------------------------------------------------------------
NVM Elapsed time = 42.232022 sec
Volatile Memory Elapsed time = 45.836667 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 4.9475250244E+01

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs
Performing 1000 iterations on a 4096 by 4096 array
-------------------------------------------------------------
NVM Elapsed time = 42.333810 sec
Volatile Memory Elapsed time = 45.933387 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 4.9475250244E+01

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs-txs2-poor
Performing 1000 iterations on a 4096 by 4096 array
-------------------------------------------------------------
NVM Elapsed time = 43.678319 sec
  tx add time  = 0.387342 sec
  shadow update alloc time  = 0.006850 sec
Volatile Memory Elapsed time = 45.999339 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 4.9475250244E+01

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs-txs2
Performing 1000 iterations on a 4096 by 4096 array
-------------------------------------------------------------
NVM Elapsed time = 43.568926 sec
  tx add time  = 0.379816 sec
  shadow update alloc time  = 1.006590 sec
Volatile Memory Elapsed time = 45.866193 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 4.9475250244E+01



Adding the following shows that all allocations are freed in all of
the above cases:

diff --git a/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c b/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c
index 86be415..4ec5147 100644
--- a/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c
+++ b/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c
@@ -71,2 +72,5 @@ struct root {
 
+size_t nvlrt_get_numAllocNV(); 
+size_t nvlrt_get_numFreeNV();
+
 int main (int argc, char *argv[])
@@ -377,2 +381,5 @@ int main (int argc, char *argv[])
 #if MEM == NVL
+        nvl_set_root(heap, 0);
+        printf("nallocs=%zu\n", nvlrt_get_numAllocNV());
+        printf("nfrees=%zu\n", nvlrt_get_numFreeNV());
        nvl_close(heap);



To check overhead of automatic reference counting:

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-norefs-poor
Performing 1000 iterations on a 4096 by 4096 array
-------------------------------------------------------------
NVM Elapsed time = 42.253278 sec
Volatile Memory Elapsed time = 46.019537 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 4.9475250244E+01



To check tx.add hoisting:

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs-txs1-poor
Performing 1000 iterations on a 4096 by 4096 array
-------------------------------------------------------------
NVM Elapsed time = 43.557632 sec
  tx add time  = 0.399481 sec
  shadow update alloc time  = 0.006138 sec
Volatile Memory Elapsed time = 46.053999 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 4.9475250244E+01



Automatic Shadow Updates
------------------------

Shadow updates are performed, and they reduce execution time only slightly
because transaction overhead is already so well amortized. On the other
hand, if more frequent transactions are desired to improve recoverability,
shadow updates can prove very beneficial. The following results are likely
out of date but motivated the development of ../jacobi-shadow-updates, on
which further experiments were based.

$ git diff -U0 .
diff --git a/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/Makefile b/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/Makefile
index 8c391cf..963f7fa 100644
--- a/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/Makefile
+++ b/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/Makefile
@@ -3 +3 @@ SIZE ?= 4096
-ITERS_PER_TX ?= 100
+ITERS_PER_TX ?= 1
diff --git a/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c b/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c
index 56a33ba..a0e38c2 100644
--- a/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c
+++ b/test/benchmarks/nvl-c/kernels/jacobi-txs-amortized/jacobi.c
@@ -20 +20 @@
-#define ITER   1000
+#define ITER   100

$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs-txs1-poor
Performing 100 iterations on a 4096 by 4096 array
-------------------------------------------------------------
NVM Elapsed time = 14.668211 sec
  tx add time  = 3.836025 sec
  shadow update alloc time  = 0.064826 sec
Volatile Memory Elapsed time = 3.575301 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 1.4997438431E+01

$ cd ../../../../..
$ patch -p1
diff --git a/src/openarc-cc.in b/src/openarc-cc.in
index 713b624..3f22f05 100755
--- a/src/openarc-cc.in
+++ b/src/openarc-cc.in
@@ -166 +166 @@ sub main {
-            . " -nvl-hoist-tx-adds-aggressive=true"
+            . " -nvl-hoist-tx-adds-aggressive=true -nvl-disable-tx-shadow-updates"

$ ./build.sh config
$ cd -
$ touch jacobi.c
$ rm -f /opt/fio/scratch/jum/jacobi.nvl && make -s run-jacobi-safe-refs-txs1-poor
Performing 100 iterations on a 4096 by 4096 array
-------------------------------------------------------------
NVM Elapsed time = 24.048445 sec
  tx add time  = 11.101878 sec
  shadow update alloc time  = 0.000000 sec
Volatile Memory Elapsed time = 3.593636 sec
Verification Successful err = 0.000000e+00
Diagonal sum = 1.4997438431E+01

****************************************************************************
WARNING: Except where otherwise indicated, all results below were collected
with nvlrt_zeroShadowUpdateAlloc() having been called (because that used to
be the default behavior). Moreover, some results seem to have changed. See
../jacobi-shadow-updates for current performance study.
****************************************************************************

At SIZE=671, ITER=1000, ITERS_PER_TX=1, the execution time is roughly the
same (min about 6.7s but time fluctuates widely) with and without shadow
updates.  This SIZE is roughly where our cost model predicts equal cost with
and without shadow updates.

At SIZE=320, ITER=1000, ITERS_PER_TX=1, shadow updates increase the
execution time from 2.1s to 3.5s.

Some more data at ITERS_PER_TX=1, ITER=100:

SIZE  undo(s)  shdw(s)   shdw/undo
----------------------------------
32768 1140     1430      1.25  \
24576  786      530      0.674 /
16384  354      239      0.675 \
 8192   90.4     59.9    0.663 /
 4096   23.5     16.0    0.681
 2048    5.74     4.05   0.706
 1024    1.45     1.24   0.855
  768    0.860    0.806  0.937 \
  640    0.578    0.610  1.06  /
  512    0.417    0.471  1.13

ITERS_PER_TX=1, ITER=100, PMEM_IS_PMEM_FORCE=1, where:
- nocp means with shadow updates that do not perform memcpy, so verification
  fails.
- alloc is the total time spent in the nvlrt_alloc_nv call within shadow
  updates.
- add is the total time spent in the nvlrt_tx_add call. When a shadow update
  is performed, it includes alloc.
- bracketed times are those when we adjust the nvlrt_alloc_nv call in
  shadow updates to skip initialization.

SIZE |undo(s)   add(s)|shdw(s)  add(s) alloc(s)|nocp(s)   add(s) alloc(s)|shdw/undo nocp/undo nocp/shdw
-----+----------------+------------------------+-------------------------+-----------------------------
32768|1260            |1450            254     |1220             249     |1.15      0.968     0.841
16384| 220            | 238             22.8   | 215              25.2   |1.08      0.977     0.903
 8192|  52.7    7.37  |  57.6   12.3     4.85  |  49.9    4.79     4.79  |1.09      0.947     0.866
 4096|  12.7          |  14.1            1.13  |  12.1             1.14  |1.11      0.953     0.858
 2048|   2.98         |   3.31           0.286 |   2.80            0.287 |1.11      0.940     0.846
 1536|   1.52         |   1.75           0.163 |   1.43            0.161 |1.15      0.941     0.817
 1024|   0.533        |   0.636                |   0.509                 |1.19      0.955     0.800
  512|   0.137        |   0.150                |   0.129                 |1.09      0.942\    0.860
  384|   0.0803       |   0.0885               |   0.0807                |1.10      1.00 |    0.912
  256|   0.0684       |   0.0858               |   0.0774                |1.25      1.13 /    0.902

ITERS_PER_TX=1, ITER=1000, PMEM_IS_PMEM_FORCE=1:

SIZE |undo(s)  add(s)   |shdw(s)        add(s)         alloc(s)         |nocp(s)         add(s)         alloc(s)        |shdw/undo   nocp/undo    nocp/shdw
-----+------------------+-----------------------------------------------+-----------------------------------------------+-------------------------------------
32768|12400   2940      |15300[11600]  5750[2940]     2410[0.0250]      |12300[9060]   2460  [0.0539] 2460  [0.0272]    |1.23[0.935] 0.992[0.731] 0.804[0.781]
16384| 2240    320      | 2420[2240]    537[354]       218[0.0165]      | 2160[1870]    270  [0.0244]  270  [0.0111]    |1.08[1.00]  0.964[0.835] 0.893[0.835]
 8192|  544     69.9    |  594[548]     120[75.6]       47.0[0.00987]   |  483[460]      45.4[0.0232]   45.4[0.00978]   |1.09[1.01]  0.888[0.846] 0.813[0.839]
 4096|  138     17.0    |  150[139]      29.1[18.2]     11.0[0.00901]   |  121[114]      11.1[0.0223]   11.1[0.00839]   |1.09[1.01]  0.877[0.826] 0.807[0.820]
 2048|   33.8    4.23   |   37.2[34.4]    7.27[4.56]     2.76[0.00936]  |   27.8[26.8]    2.77[0.0223]   2.76[0.00937]  |1.10[1.02]  0.822[0.793] 0.747[0.779]
 1536|   18.0           |                                               |   14.3                                        |            0.794
 1280|   11.7           |                                               |    8.91                                       |            0.762
 1248|   10.9           |                                               |    8.04                                       |            0.738 \  
 1232|   10.5           |                                               |    7.96                                       |            0.758 |  
 1216|   10.2           |                                               |    7.55                                       |            0.740 /  
 1152|    8.88          |                                               |    6.60                                       |            0.743
 1024|    6.77   1.04   |    7.80[7.07]   1.68[0.941]    0.618[0.00774] |    5.07[5.08]   0.732[0.0175]  0.721[0.00622] |1.15[1.04]  0.749[0.750] 0.650[0.719]
  768|    3.74   0.583  |                                               |        [3.03]        [0.0141]       [0.00436] |                 [0.810]
  640|    2.50          |    2.91                                       |    2.10[2.14]        [0.0141]       [0.00433] |1.16        0.840[0.856] 0.722
  576|    1.96   0.329  |                                               |        [1.84]        [0.0139]       [0.00426] |                 [0.939]
  544|    1.72   0.295  |                                               |        [1.53]        [0.0141]       [0.00433] |                 [0.890]
  528|    1.60   0.278  |                                               |        [1.53]        [0.0141]       [0.00438] |                 [0.956]
  520|    1.55   0.271  |                                               |        [1.53]        [0.0141]       [0.00433] |                 [0.987]\
  516|    1.52   0.267  |                                               |        [1.53]        [0.0146]       [0.00450] |                 [1.01] /
  512|    1.49   0.262  |    1.61[1.70]   0.235[0.163]   0.0711[0.00431]|    1.27[1.53]   0.130[0.0140]  0.120[0.00429] |1.08[1.14]  0.852[1.03]  0.789[0.900]
  320|    0.539         |    0.582                                      |    0.530[0.596]      [0.0145]       [0.00444] |1.08        0.983[1.11]  0.911
  316|    0.526         |                                               |    0.525[0.596]      [0.0141]       [0.00435] |            0.998 \ [1.13]
  315|    0.521         |                                               |    0.525[0.597]      [0.0142]       [0.00435] |            1.01  / [1.15]
  314|    0.521         |                                               |    0.524                                      |            1.01
  312|    0.514         |                                               |    0.523                                      |            1.02
  304|    0.487         |                                               |    0.515                                      |            1.06
  288|    0.440         |                                               |    0.573                                      |            1.14
  256|    0.350  0.0688 |    0.498[0.639] 0.0752[0.0434] 0.0365[0.00431]|    0.473[0.615] 0.0589[0.0140] 0.0492[0.00432]|1.42[1.83]  1.35[1.76]   0.950[0.962]
  128|    0.0959 0.0188 |         [0.139]       [0.0213]       [0.00422]|                                               |    [1.45]
   32|    0.0185 0.00694|         [0.0274]      [0.0158]       [0.00459]|                                               |    [1.48]
   16|    0.0252 0.0106 |         [0.0240]      [0.0162]       [0.00477]|                                               |    [0.952]
    8|    0.0223 0.0101 |         [0.0242]      [0.0164]       [0.00477]|                                               |    [1.09]

Again but on /opt/rd/scratch/jum/jacobi.nvl. Nothing I measured changed
noticeably, so apparently OS page buffering does an excellent job of hiding
the underlying hardware (SSD or ramdisk) performance:

SIZE |undo(s)   add(s)|shdw(s)   add(s) alloc(s)|nocp(s)   add(s) alloc(s)|shdw/undo nocp/undo nocp/shdw
-----+----------------+-------------------------+-------------------------+-----------------------------
 8192|  537           |  584                    |  490                    |1.09      0.912     0.839
 4096|  138           |  149                    |  120                    |1.08      0.870     0.805
 2048|   33.8   4.20  |   37.1   7.22   2.72    |   27.7   2.73   2.72    |1.10      0.820     0.747
 1024|    6.74        |    7.77                 |    5.08                 |1.15      0.754     0.654
  512|    1.49        |    1.60                 |    1.27                 |1.07      0.852\    0.794
  256|    0.349       |    0.497                |    0.473                |1.42      1.36 /    0.952
