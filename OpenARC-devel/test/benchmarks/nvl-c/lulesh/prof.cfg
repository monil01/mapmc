#!/usr/bin/env perl

package Cfg;

use warnings;
use strict;

# Each cmd below is run for each row value many times each time this
# script is called. The number of runs is determined by the following
# conditions, where $minRuns has priority over the other two.
our $minRuns = 3;
our $maxRuns = 25;
our $maxMinutes = 30;

# How many significant digits should values keep?
our $sigDigits = 3;

my $is_pmem = 0;

my $nvlFile = "/opt/fio/scratch/jum/lulesh.nvl";

our @cmds = (
  # ID, compileShell, runShell
  # Shell code can access the row value via the environment variable $ROW.
  ["undo",
   "make --always-make _N_=\$ROW SHADOW_UPDATE_COST_MODE=NVLRT_COST_INFINITE"
   ."    lulesh-safe-refs-txs1-poor",
   "rm -f $nvlFile"
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem run-lulesh-safe-refs-txs1-poor"],
  ["shdw",
   "make --always-make _N_=\$ROW SHADOW_UPDATE_COST_MODE=NVLRT_COST_ZERO"
   ."    lulesh-safe-refs-txs1-poor",
   "rm -f $nvlFile"
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem run-lulesh-safe-refs-txs1-poor"],
  ["sbwf",
   "make --always-make _N_=\$ROW SHADOW_UPDATE_COST_MODE=NVLRT_COST_ZERO"
   ."    lulesh-safe-refs-txs4-poor",
   "rm -f $nvlFile"
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem run-lulesh-safe-refs-txs4-poor"],
  ["auto",
   "make --always-make _N_=\$ROW SHADOW_UPDATE_COST_MODE=NVLRT_COST_DEFAULT"
   ."    lulesh-safe-refs-txs1-poor",
   "rm -f $nvlFile"
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem run-lulesh-safe-refs-txs1-poor"],
  ["abwf",
   "make --always-make _N_=\$ROW SHADOW_UPDATE_COST_MODE=NVLRT_COST_DEFAULT"
   ."    lulesh-safe-refs-txs4-poor",
   "rm -f $nvlFile"
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem run-lulesh-safe-refs-txs4-poor"],
);

our @formats = (
  # The update ID of a mode "~" cell must be the ID of a mode "~" cell
  # (possibly itself) that has the same cmd ID. The former cell updates iff
  # the latter cell's new value is smaller than the latter cell's old value,
  # which is considered to be infinite if it does not exist. If the update
  # ID is undef, it's assumed to be the cell's own ID, which must not be
  # undef.
  #
  # Any regex can escape $Run::valRegex to be expanded later as a regex that
  # matches well-formed integer and floating point values.
  #
  # Mode "~" cell regexes must capture one value.
  #
  # Mode "?~" cell regexes can escape $Run::v{$cellID} to be expanded later
  # as the value of a mode "r" cell whose cell ID is $cellID.
  #
  # Mode "=" cell formulas can escape $Run::v{$cellID} to be expanded later
  # as the value of a mode "r" cell or any preceding cell (preceding the
  # mode "=" cell) whose ID is $cellID. Referring to following cells that
  # are not mode "r" can produce incorrect values.
  #
  # Rows are guaranteed to be sorted by mode "r" cells in descending order
  # before mode "-" cells are computed.
  #
  # mode
  # "r",  ID,        title
  # "|"
  # "~",  ID,        title,               cmdID,       updateID,    regex
  # "?~",                                 cmdID,                    regex
  # "=",  ID,        title,               formula, [conversion]
  # "-", fn, titles, xColID, yColIDs, [conversion]
  ["?~",                                  "undo",                   "^\\(NVL mode, is_pmem=$is_pmem, tx mode=1\\)\$"],
  ["?~",                                  "shdw",                   "^\\(NVL mode, is_pmem=$is_pmem, tx mode=1\\)\$"],
  ["?~",                                  "sbwf",                   "^\\(NVL mode, is_pmem=$is_pmem, tx mode=4\\)\$"],
  ["?~",                                  "auto",                   "^\\(NVL mode, is_pmem=$is_pmem, tx mode=1\\)\$"],
  ["?~",                                  "abwf",                   "^\\(NVL mode, is_pmem=$is_pmem, tx mode=4\\)\$"],

  ["r",  "N",        "N"],
  ["?~",                                  "undo",                   '^edgeElemes = $Run::v{"N"}$'],
  ["?~",                                  "shdw",                   '^edgeElemes = $Run::v{"N"}$'],
  ["?~",                                  "sbwf",                   '^edgeElemes = $Run::v{"N"}$'],
  ["?~",                                  "auto",                   '^edgeElemes = $Run::v{"N"}$'],
  ["?~",                                  "abwf",                   '^edgeElemes = $Run::v{"N"}$'],

  ["|"],

  ["~",  "undo",     "undo(s)",           "undo",      undef,       '^Total elapsed time = ($Run::valRegex) sec$'],
  ["~",  "shdw",     "shdw(s)",           "shdw",      undef,       '^Total elapsed time = ($Run::valRegex) sec$'],
  ["~",  "sbwf",     "sbwf(s)",           "sbwf",      undef,       '^Total elapsed time = ($Run::valRegex) sec$'],
  ["=",  undef,      "shdw/undo",         '$Run::v{"shdw"}/$Run::v{"undo"}'],
  ["=",  undef,      "sbwf/undo",         '$Run::v{"sbwf"}/$Run::v{"undo"}'],
  ["~",  "auto",     "auto(s)",           "auto",      undef,       '^Total elapsed time = ($Run::valRegex) sec$'],
  ["~",  "abwf",     "abwf(s)",           "abwf",      undef,       '^Total elapsed time = ($Run::valRegex) sec$'],

  ["|"],

  ["~",  "undo_txA", "undo_txA(s)",       "undo",      undef,       '^tx A time = ($Run::valRegex) sec$'],
  ["~",  "shdw_txA", "shdw_txA(s)",       "shdw",      undef,       '^tx A time = ($Run::valRegex) sec$'],
  ["~",  "sbwf_txA", "sbwf_txA(s)",       "sbwf",      undef,       '^tx A time = ($Run::valRegex) sec$'],
  ["~",  "auto_txA", "auto_txA(s)",       "auto",      undef,       '^tx A time = ($Run::valRegex) sec$'],
  ["~",  "abwf_txA", "abwf_txA(s)",       "abwf",      undef,       '^tx A time = ($Run::valRegex) sec$'],

  ["|"],

  ["~",  "undo_txB", "undo_txB(s)",       "undo",      undef,       '^tx B time = ($Run::valRegex) sec$'],
  ["~",  "shdw_txB", "shdw_txB(s)",       "shdw",      undef,       '^tx B time = ($Run::valRegex) sec$'],
  ["~",  "sbwf_txB", "sbwf_txB(s)",       "sbwf",      undef,       '^tx B time = ($Run::valRegex) sec$'],
  ["~",  "auto_txB", "auto_txB(s)",       "auto",      undef,       '^tx B time = ($Run::valRegex) sec$'],
  ["~",  "abwf_txB", "abwf_txB(s)",       "abwf",      undef,       '^tx B time = ($Run::valRegex) sec$'],

  ["|"],

  ["~",  "undo_txC", "undo_txC(s)",       "undo",      undef,       '^tx C time = ($Run::valRegex) sec$'],
  ["~",  "shdw_txC", "shdw_txC(s)",       "shdw",      undef,       '^tx C time = ($Run::valRegex) sec$'],
  ["~",  "sbwf_txC", "sbwf_txC(s)",       "sbwf",      undef,       '^tx C time = ($Run::valRegex) sec$'],
  ["~",  "auto_txC", "auto_txC(s)",       "auto",      undef,       '^tx C time = ($Run::valRegex) sec$'],
  ["~",  "abwf_txC", "abwf_txC(s)",       "abwf",      undef,       '^tx C time = ($Run::valRegex) sec$'],

  ["|"],

  ["~",  "undo_txD", "undo_txD(s)",       "undo",      undef,       '^tx D time = ($Run::valRegex) sec$'],
  ["~",  "shdw_txD", "shdw_txD(s)",       "shdw",      undef,       '^tx D time = ($Run::valRegex) sec$'],
  ["~",  "sbwf_txD", "sbwf_txD(s)",       "sbwf",      undef,       '^tx D time = ($Run::valRegex) sec$'],
  ["~",  "auto_txD", "auto_txD(s)",       "auto",      undef,       '^tx D time = ($Run::valRegex) sec$'],
  ["~",  "abwf_txD", "abwf_txD(s)",       "abwf",      undef,       '^tx D time = ($Run::valRegex) sec$'],

  ["|"],

  ["~",  "undo_txE", "undo_txE(s)",       "undo",      undef,       '^tx E time = ($Run::valRegex) sec$'],
  ["~",  "shdw_txE", "shdw_txE(s)",       "shdw",      undef,       '^tx E time = ($Run::valRegex) sec$'],
  ["~",  "sbwf_txE", "sbwf_txE(s)",       "sbwf",      undef,       '^tx E time = ($Run::valRegex) sec$'],
  ["~",  "auto_txE", "auto_txE(s)",       "auto",      undef,       '^tx E time = ($Run::valRegex) sec$'],
  ["~",  "abwf_txE", "abwf_txE(s)",       "abwf",      undef,       '^tx E time = ($Run::valRegex) sec$'],
);
