#!/usr/bin/env perl

package Cfg;

use warnings;
use strict;

use FindBin;
use lib "$FindBin::Bin/perl/lib";
use Statistics::LineFit;

# Each cmd below is run for each row value many times each time this
# script is called. The number of runs is determined by the following
# conditions, where $minRuns has priority over the other two.
our $minRuns = 10;
our $maxRuns = 1000;
our $maxMinutes = 30;

# How many significant digits should values keep?
#
# I originally collected data with 4 digits, but I later decided to
# recompute fits with 6 digits because I found that predictions were more
# often correct that way.
our $sigDigits = 6;

my $is_pmem = 0;

my $nvlFile = "/opt/fio/scratch/jum/prof-tx-add.nvl";

our @cmds = (
  # ID, compileShell, runShell
  # Shell code can access the row value via the environment variable $ROW.
  ["undo",
   "cd .. && make prof/prof-tx-add",
   "rm -f $nvlFile && cd .."
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem PROFILE_N=\$ROW PROFILE_MODE=undo"
   ."         run-prof-tx-add"],
  ["shdw",
   "cd .. && make prof/prof-tx-add",
   "rm -f $nvlFile && cd .."
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem PROFILE_N=\$ROW PROFILE_MODE=shdw"
   ."         run-prof-tx-add"],
  ["write",
   "cd .. && make prof/prof-tx-add",
   "rm -f $nvlFile && cd .."
   ." && make PMEM_IS_PMEM_FORCE=$is_pmem PROFILE_N=\$ROW PROFILE_MODE=write"
   ."         run-prof-tx-add"],
);

our @formats = (
  # The update ID of a mode "~" cell must be the ID of a mode "~" cell
  # (possibly itself) that has the same cmd ID. The former cell updates iff
  # the latter cell's new value is smaller than the latter cell's old value,
  # which is considered to be infinite if it does not exist. If the update
  # ID is undef, it's assumed to be the cell's own ID, which must not be
  # undef.
  #
  # Any regex can escape $Run::valRegex to be expanded later as a regex that
  # matches well-formed integer and floating point values.
  #
  # Mode "~" cell regexes must capture one value.
  #
  # Mode "?~" cell regexes can escape $Run::v{$cellID} to be expanded later
  # as the value of a mode "r" cell whose cell ID is $cellID.
  #
  # Mode "=" cell formulas can escape $Run::v{$cellID} to be expanded later
  # as the value of a mode "r" cell or any preceding cell (preceding the
  # mode "=" cell) whose ID is $cellID. Referring to following cells that
  # are not mode "r" can produce incorrect values.
  #
  # Rows are guaranteed to be sorted by mode "r" cells in descending order
  # before mode "-" cells are computed.
  #
  # mode
  # "r", ID,          title
  # "|"       
  # "~", ID,          title,          cmdID,   updateID, regex
  # "?~",                             cmdID,             regex
  # "=", ID,          title,          formula, [conversion]
  # "-", fn, titles, xColID, yColIDs, [conversion]

  ["r",  "N",         "N"],
  ["?~",                              "undo",            '^N = $Run::v{"N"}$'],
  ["?~",                              "shdw",            '^N = $Run::v{"N"}$'],
  ["?~",                              "write",           '^N = $Run::v{"N"}$'],

  ["=",  "size",      "size(bytes)",  '$Run::v{"N"} * $Run::v{"N"} * 4', "%d"],

  ["|"],

  ["?~",                              "undo",            '^mode = undo$'],
  ["?~",                              "shdw",            '^mode = shdw$'],
  ["?~",                              "write",           '^mode = write$'],

  ["?~",                              "undo",            "^is_pmem = $is_pmem\$"],
  ["?~",                              "shdw",            "^is_pmem = $is_pmem\$"],
  ["?~",                              "write",           "^is_pmem = $is_pmem\$"],

  ["~",  "undo",      "undo(s)",      "undo",  undef,    '^time = ($Run::valRegex) sec$'],
  ["~",  "shdw",      "shdw(s)",      "shdw",  undef,    '^time = ($Run::valRegex) sec$'],
  ["~",  "write",     "write(s)",     "write", undef,    '^time = ($Run::valRegex) sec$'],

  ["=",  "sbwf",      "sbwf(s)",      '$Run::v{"shdw"} - $Run::v{"write"}'],
  ["=",  "sbwf/undo", "sbwf/undo",    '$Run::v{"sbwf"}/$Run::v{"undo"}'],

  ["-",  \&powerFit, ["a:y=a*x^b+c", "b:y=a*x^b+c", "c:y=a*x^b+c"],
         "size", ["undo", "write", "sbwf"]],

  ["-",  \&minGe1, ["cutoff size"], "size", ["sbwf/undo"], "%d"]
);

sub powerFit {
  defined(my $rowVals = shift(@_)) || die();
  defined(my $xVals = shift(@_)) || die();
  defined(my $yVals = shift(@_)) || die();
  !scalar(@_) || die();

  # Filter out base value and problem values.
  my @xValsFit;
  my @yValsFit;
  my $yValBase;
  for my $i (0 .. $#$xVals) {
    my $rowVal = $rowVals->[$i];
    my $xVal = $xVals->[$i];
    my $yVal = $yVals->[$i];
    if ($rowVal == 1) {
      $yValBase = $yVal;
    }
    elsif ($rowVal < 512) {
      # Values in this range often throw off the power fit.
    }
    else {
      push(@xValsFit, $xVal);
      push(@yValsFit, $yVal);
    }
  }
  if (!defined($yValBase)) {
    warn("$0: powerFit: could not find N=1, setting intercept to NaN\n");
    $yValBase = "NaN";
  }

  # If not enough values are left for a fit, warn and return NaNs.
  if (scalar(@xValsFit) < 2) {
    warn("$0: powerFit: not enough values to fit, setting all parameters to"
         ." NaN:".scalar(@xValsFit)."\n");
    return ["NaN", "NaN", "NaN"];
  }

  # Subtract base and compute log.
  for my $i (0 .. $#xValsFit) {
    $xValsFit[$i] = log($xValsFit[$i]);
    $yValsFit[$i] = log($yValsFit[$i] - $yValBase);
  }

  # Compute fit.
  my $fit = Statistics::LineFit->new();
  $fit->setData(\@xValsFit, \@yValsFit);
  my ($intercept, $slope) = $fit->coefficients();
  if (!defined($intercept)) {
    # This error message is suggested by the Statistics::LineFit
    # documentation.
    die("powerFit: cannot fit line if x values are all equal\n");
  }
  return [exp($intercept), $slope, $yValBase];
}

sub minGe1 {
  defined(my $rowVals = shift(@_)) || die();
  defined(my $xVals = shift(@_)) || die();
  defined(my $yVals = shift(@_)) || die();
  !scalar(@_) || die();
  for my $i (0 .. $#$xVals) {
    if ($yVals->[$i] >= 1) {
      return [$xVals->[$i]];
    }
  }
  return [0];
}
