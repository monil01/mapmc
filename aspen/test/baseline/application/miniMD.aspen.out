
------------------- Syntax Trees ---------------------

----- Main Application Model -----
App model miniMD:
   Globals:
      Identifier nAtom = 
         Int: 100000
      Identifier nTimeSteps = 
         Int: 100
      Identifier wordSize = 
         Int: 4
      Identifier boxX = 
         Int: 10
      Identifier boxY = 
         Int: 10
      Identifier boxZ = 
         Int: 10
      Identifier cutoff = 
         Real: 2.5
      Identifier cellVolume = 
         Binary Op ^
            LHS
               Ident: cutoff
            RHS
               Int: 3
      Identifier nCellsX = 
         Binary Op /
            LHS
               Ident: boxX
            RHS
               Ident: cutoff
      Identifier nCellsY = 
         Binary Op /
            LHS
               Ident: boxY
            RHS
               Ident: cutoff
      Identifier nCellsZ = 
         Binary Op /
            LHS
               Ident: boxZ
            RHS
               Ident: cutoff
      Identifier P = 
         Int: 8
      Identifier P_X = 
         Int: 2
      Identifier P_Y = 
         Int: 2
      Identifier P_Z = 
         Int: 2
      Identifier CELLS_X = 
         Int: 5
      Identifier CELLS_Y = 
         Int: 5
      Identifier CELLS_Z = 
         Int: 5
      Identifier atomDensity = 
         Binary Op /
            LHS
               Ident: nAtom
            RHS
               Binary Op *
                  LHS
                     Binary Op *
                        LHS
                           Ident: boxX
                        RHS
                           Ident: boxY
                  RHS
                     Ident: boxZ
      Identifier atomsPerCell = 
         Binary Op *
            LHS
               Ident: cellVolume
            RHS
               Ident: atomDensity
      Identifier avgNeighbors = 
         Binary Op *
            LHS
               Binary Op *
                  LHS
                     Binary Op *
                        LHS
                           Binary Op /
                              LHS
                                 Int: 4
                              RHS
                                 Int: 3
                        RHS
                           Real: 3.14
                  RHS
                     Ident: cellVolume
            RHS
               Ident: atomDensity
      Identifier varSizePerCell = 
         Binary Op *
            LHS
               Binary Op *
                  LHS
                     Ident: atomsPerCell
                  RHS
                     Int: 3
            RHS
               Ident: wordSize
      Data position:
         As:
            Call Array with 2 args:
               Ident: nAtom
               Binary Op *
                  LHS
                     Binary Op *
                        LHS
                           Ident: wordSize
                        RHS
                           Int: 3
                  RHS
                     Int: 2
      Data velocity:
         As:
            Call Array with 2 args:
               Ident: nAtom
               Binary Op *
                  LHS
                     Ident: wordSize
                  RHS
                     Int: 3
      Data forces:
         As:
            Call Array with 2 args:
               Ident: nAtom
               Binary Op *
                  LHS
                     Ident: wordSize
                  RHS
                     Int: 3
      Data neighborList:
         As:
            Call Array with 2 args:
               Ident: nAtom
               Binary Op *
                  LHS
                     Ident: avgNeighbors
                  RHS
                     Ident: wordSize
   Kernels:
      Kernel accelerate:
         Control node '101': sequential:
            Execution Block (control node '100')
               Parallelism:
                  Ident: nAtom
               Requires flops of quantity: 
                  Int: 2
                  As fmad
                  As simd
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Ident: wordSize
                     RHS
                        Int: 3
                  To/From: forces
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Ident: wordSize
                     RHS
                        Int: 3
                  To/From: velocity
               Requires stores of quantity: 
                  Binary Op *
                     LHS
                        Ident: wordSize
                     RHS
                        Int: 3
                  To/From: velocity
      Kernel push:
         Control node '103': sequential:
            Execution Block (control node '102')
               Parallelism:
                  Ident: nAtom
               Requires flops of quantity: 
                  Int: 2
                  As fmad
                  As simd
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Ident: wordSize
                     RHS
                        Int: 3
                  To/From: position
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Ident: wordSize
                     RHS
                        Int: 3
                  To/From: velocity
               Requires stores of quantity: 
                  Binary Op *
                     LHS
                        Ident: wordSize
                     RHS
                        Int: 3
                  To/From: position
      Kernel exchange:
         Control node '105': sequential:
            Execution Block (control node '104')
               Parallelism:
                  Ident: P
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Int: 2
                                 RHS
                                    Ident: CELLS_Y
                           RHS
                              Ident: CELLS_Z
                     RHS
                        Ident: varSizePerCell
                  To/From: position
               Requires messages of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Int: 2
                                 RHS
                                    Ident: CELLS_Y
                           RHS
                              Ident: CELLS_Z
                     RHS
                        Ident: varSizePerCell
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Int: 2
                                 RHS
                                    Ident: CELLS_X
                           RHS
                              Ident: CELLS_Z
                     RHS
                        Ident: varSizePerCell
                  To/From: position
               Requires messages of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Int: 2
                                 RHS
                                    Ident: CELLS_X
                           RHS
                              Ident: CELLS_Z
                     RHS
                        Ident: varSizePerCell
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Int: 2
                                 RHS
                                    Ident: CELLS_X
                           RHS
                              Ident: CELLS_Y
                     RHS
                        Ident: varSizePerCell
                  To/From: position
               Requires messages of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Int: 2
                                 RHS
                                    Ident: CELLS_X
                           RHS
                              Ident: CELLS_Y
                     RHS
                        Ident: varSizePerCell
               Requires stores of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Int: 2
                                 RHS
                                    Ident: CELLS_Y
                           RHS
                              Ident: CELLS_Z
                     RHS
                        Ident: varSizePerCell
                  To/From: position
               Requires stores of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Int: 2
                                 RHS
                                    Ident: CELLS_X
                           RHS
                              Ident: CELLS_Z
                     RHS
                        Ident: varSizePerCell
                  To/From: position
               Requires stores of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Int: 2
                                 RHS
                                    Ident: CELLS_X
                           RHS
                              Ident: CELLS_Y
                     RHS
                        Ident: varSizePerCell
                  To/From: position
      Kernel buildNList:
         Control node '107': sequential:
            Execution Block (control node '106')
               Parallelism:
                  Ident: nAtom
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Ident: varSizePerCell
                     RHS
                        Int: 27
                  To/From: position
               Requires flops of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Ident: atomsPerCell
                           RHS
                              Int: 27
                     RHS
                        Int: 8
                  As simd
               Requires stores of quantity: 
                  Binary Op *
                     LHS
                        Ident: avgNeighbors
                     RHS
                        Ident: wordSize
                  To/From: neighborList
      Kernel ljForce:
         Control node '109': sequential:
            Execution Block (control node '108')
               Parallelism:
                  Ident: nAtom
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Int: 3
                     RHS
                        Ident: wordSize
                  To/From: position
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Ident: avgNeighbors
                     RHS
                        Ident: wordSize
                  To/From: neighborList
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Ident: avgNeighbors
                           RHS
                              Int: 3
                     RHS
                        Ident: wordSize
                  To/From: position
                  As random
               Requires flops of quantity: 
                  Binary Op *
                     LHS
                        Ident: avgNeighbors
                     RHS
                        Binary Op +
                           LHS
                              Int: 8
                           RHS
                              Int: 13
                  As simd
               Requires stores of quantity: 
                  Binary Op *
                     LHS
                        Int: 3
                     RHS
                        Ident: wordSize
                  To/From: forces
      Kernel main:
         Control node '118': sequential:
            Control node '117': iterate:
               Quantity:
                  Ident: nTimeSteps
               Control node '116': sequential:
                  Control node '110': kernel call push
                  Control node '111': kernel call accelerate
                  Control node '112': kernel call exchange
                  Control node '113': kernel call buildNList
                  Control node '114': kernel call ljForce
                  Control node '115': kernel call push

-----------------------------------------------------


 ------  Application Analysis ------
>> Basic control flow expression
flops    = nTimeSteps*((push*2) + accelerate + exchange + buildNList + ljForce)

>> Raw expression without variable expansion:
flops    = nTimeSteps*((nAtom*2) + (nAtom*2) + 0 + (nAtom*((atomsPerCell*27)*8)) + (nAtom*(avgNeighbors*(8 + 13))) + (nAtom*2))
messages = nTimeSteps*(0 + 0 + (P*((((2*CELLS_Y)*CELLS_Z)*varSizePerCell + ((2*CELLS_X)*CELLS_Z)*varSizePerCell) + ((2*CELLS_X)*CELLS_Y)*varSizePerCell)) + 0 + 0 + 0)
loads    = nTimeSteps*((nAtom*(wordSize*3 + wordSize*3)) + (nAtom*(wordSize*3 + wordSize*3)) + (P*((((2*CELLS_Y)*CELLS_Z)*varSizePerCell + ((2*CELLS_X)*CELLS_Z)*varSizePerCell) + ((2*CELLS_X)*CELLS_Y)*varSizePerCell)) + (nAtom*(varSizePerCell*27)) + (nAtom*((3*wordSize + avgNeighbors*wordSize) + (avgNeighbors*3)*wordSize)) + (nAtom*(wordSize*3 + wordSize*3)))
stores   = nTimeSteps*((nAtom*(wordSize*3)) + (nAtom*(wordSize*3)) + (P*((((2*CELLS_Y)*CELLS_Z)*varSizePerCell + ((2*CELLS_X)*CELLS_Z)*varSizePerCell) + ((2*CELLS_X)*CELLS_Y)*varSizePerCell)) + (nAtom*(avgNeighbors*wordSize)) + (nAtom*(3*wordSize)) + (nAtom*(wordSize*3)))

>> Raw expression with variable expansion:
flops    = 100*((100000*2) + (100000*2) + 0 + (100000*(((2.5^3*(100000 / ((10*10)*10)))*27)*8)) + (100000*(((((4 / 3)*3.14)*2.5^3)*(100000 / ((10*10)*10)))*(8 + 13))) + (100000*2))
messages = 100*(0 + 0 + (8*((((2*5)*5)*(((2.5^3*(100000 / ((10*10)*10)))*3)*4) + ((2*5)*5)*(((2.5^3*(100000 / ((10*10)*10)))*3)*4)) + ((2*5)*5)*(((2.5^3*(100000 / ((10*10)*10)))*3)*4))) + 0 + 0 + 0)
loads    = 100*((100000*(4*3 + 4*3)) + (100000*(4*3 + 4*3)) + (8*((((2*5)*5)*(((2.5^3*(100000 / ((10*10)*10)))*3)*4) + ((2*5)*5)*(((2.5^3*(100000 / ((10*10)*10)))*3)*4)) + ((2*5)*5)*(((2.5^3*(100000 / ((10*10)*10)))*3)*4))) + (100000*((((2.5^3*(100000 / ((10*10)*10)))*3)*4)*27)) + (100000*((3*4 + ((((4 / 3)*3.14)*2.5^3)*(100000 / ((10*10)*10)))*4) + (((((4 / 3)*3.14)*2.5^3)*(100000 / ((10*10)*10)))*3)*4)) + (100000*(4*3 + 4*3)))
stores   = 100*((100000*(4*3)) + (100000*(4*3)) + (8*((((2*5)*5)*(((2.5^3*(100000 / ((10*10)*10)))*3)*4) + ((2*5)*5)*(((2.5^3*(100000 / ((10*10)*10)))*3)*4)) + ((2*5)*5)*(((2.5^3*(100000 / ((10*10)*10)))*3)*4))) + (100000*(((((4 / 3)*3.14)*2.5^3)*(100000 / ((10*10)*10)))*4)) + (100000*(3*4)) + (100000*(4*3)))

>> as values, With parameters using default values
flops    = 4.74881e+12
messages = 2.25e+09
loads    = 6.11226e+12
stores   = 2.64397e+11

>> Simplification test:
flops (noexp)       = nTimeSteps*((nAtom*2) + (nAtom*2) + 0 + (nAtom*((atomsPerCell*27)*8)) + (nAtom*(avgNeighbors*(8 + 13))) + (nAtom*2))
flops (noexp,simpl) = (nTimeSteps * nAtom * ((6 + ((21 * avgNeighbors)) + (atomsPerCell*(27 * 8)))))
flops (exp)         = 100*((100000*2) + (100000*2) + 0 + (100000*(((2.5^3*(100000 / ((10*10)*10)))*27)*8)) + (100000*(((((4 / 3)*3.14)*2.5^3)*(100000 / ((10*10)*10)))*(8 + 13))) + (100000*2))
flops (exp,simpl)   = 4.74881e+12

There are 0 parameters with ranges.



>> Kernel accelerate

Raw flops for kernel 'accelerate' = 200000
Raw loads for kernel 'accelerate' = 2.4e+06
Raw stores for kernel 'accelerate' = 1.2e+06
Raw messages for kernel 'accelerate' = 0

Exclusive set size is nAtom*(wordSize*3) + nAtom*(wordSize*3)
Inclusive set size is nAtom*(wordSize*3) + nAtom*(wordSize*3)

Calculating flops/byte intensity for kernel 'accelerate':
  = (nAtom*2) / (nAtom*((wordSize*3 + wordSize*3) + wordSize*3))
  expanding, but in terms of x:
  = (x*2) / (x*((4*3 + 4*3) + 4*3))


>> Kernel push

Raw flops for kernel 'push' = 200000
Raw loads for kernel 'push' = 2.4e+06
Raw stores for kernel 'push' = 1.2e+06
Raw messages for kernel 'push' = 0

Exclusive set size is nAtom*((wordSize*3)*2) + nAtom*(wordSize*3)
Inclusive set size is nAtom*((wordSize*3)*2) + nAtom*(wordSize*3)

Calculating flops/byte intensity for kernel 'push':
  = (nAtom*2) / (nAtom*((wordSize*3 + wordSize*3) + wordSize*3))
  expanding, but in terms of x:
  = (x*2) / (x*((4*3 + 4*3) + 4*3))


>> Kernel exchange

Raw flops for kernel 'exchange' = 0
Raw loads for kernel 'exchange' = 2.25e+07
Raw stores for kernel 'exchange' = 2.25e+07
Raw messages for kernel 'exchange' = 2.25e+07

Exclusive set size is nAtom*((wordSize*3)*2)
Inclusive set size is nAtom*((wordSize*3)*2)

Calculating flops/byte intensity for kernel 'exchange':
  = 0 / (P*(((((((2*CELLS_Y)*CELLS_Z)*varSizePerCell + ((2*CELLS_X)*CELLS_Z)*varSizePerCell) + ((2*CELLS_X)*CELLS_Y)*varSizePerCell) + ((2*CELLS_Y)*CELLS_Z)*varSizePerCell) + ((2*CELLS_X)*CELLS_Z)*varSizePerCell) + ((2*CELLS_X)*CELLS_Y)*varSizePerCell))
  expanding, but in terms of x:
  = 0 / (8*(((((((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4) + ((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4)) + ((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4)) + ((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4)) + ((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4)) + ((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4)))


>> Kernel buildNList

Raw flops for kernel 'buildNList' = 3.375e+10
Raw loads for kernel 'buildNList' = 5.0625e+10
Raw stores for kernel 'buildNList' = 2.61667e+09
Raw messages for kernel 'buildNList' = 0

Exclusive set size is nAtom*(avgNeighbors*wordSize) + nAtom*((wordSize*3)*2)
Inclusive set size is nAtom*(avgNeighbors*wordSize) + nAtom*((wordSize*3)*2)

Calculating flops/byte intensity for kernel 'buildNList':
  = (nAtom*((atomsPerCell*27)*8)) / (nAtom*(varSizePerCell*27 + avgNeighbors*wordSize))
  expanding, but in terms of x:
  = (x*(((2.5^3*(x / ((10*10)*10)))*27)*8)) / (x*((((2.5^3*(x / ((10*10)*10)))*3)*4)*27 + ((((4 / 3)*3.14)*2.5^3)*(x / ((10*10)*10)))*4))


>> Kernel ljForce

Raw flops for kernel 'ljForce' = 1.37375e+10
Raw loads for kernel 'ljForce' = 1.04679e+10
Raw stores for kernel 'ljForce' = 1.2e+06
Raw messages for kernel 'ljForce' = 0

Exclusive set size is (nAtom*(wordSize*3) + nAtom*(avgNeighbors*wordSize)) + nAtom*((wordSize*3)*2)
Inclusive set size is (nAtom*(wordSize*3) + nAtom*(avgNeighbors*wordSize)) + nAtom*((wordSize*3)*2)

Calculating flops/byte intensity for kernel 'ljForce':
  = (nAtom*(avgNeighbors*(8 + 13))) / (nAtom*(((3*wordSize + avgNeighbors*wordSize) + (avgNeighbors*3)*wordSize) + 3*wordSize))
  expanding, but in terms of x:
  = (x*(((((4 / 3)*3.14)*2.5^3)*(x / ((10*10)*10)))*(8 + 13))) / (x*(((3*4 + ((((4 / 3)*3.14)*2.5^3)*(x / ((10*10)*10)))*4) + (((((4 / 3)*3.14)*2.5^3)*(x / ((10*10)*10)))*3)*4) + 3*4))


>> Kernel main

Raw flops for kernel 'main' = 4.74881e+12
Raw loads for kernel 'main' = 6.11226e+12
Raw stores for kernel 'main' = 2.64397e+11
Raw messages for kernel 'main' = 2.25e+09

Exclusive set size is 0
Inclusive set size is ((nAtom*(wordSize*3) + nAtom*(avgNeighbors*wordSize)) + nAtom*((wordSize*3)*2)) + nAtom*(wordSize*3)

Calculating flops/byte intensity for kernel 'main':
  = (nTimeSteps*((nAtom*2) + (nAtom*2) + 0 + (nAtom*((atomsPerCell*27)*8)) + (nAtom*(avgNeighbors*(8 + 13))) + (nAtom*2))) / (nTimeSteps*((nAtom*((wordSize*3 + wordSize*3) + wordSize*3)) + (nAtom*((wordSize*3 + wordSize*3) + wordSize*3)) + (P*(((((((2*CELLS_Y)*CELLS_Z)*varSizePerCell + ((2*CELLS_X)*CELLS_Z)*varSizePerCell) + ((2*CELLS_X)*CELLS_Y)*varSizePerCell) + ((2*CELLS_Y)*CELLS_Z)*varSizePerCell) + ((2*CELLS_X)*CELLS_Z)*varSizePerCell) + ((2*CELLS_X)*CELLS_Y)*varSizePerCell)) + (nAtom*(varSizePerCell*27 + avgNeighbors*wordSize)) + (nAtom*(((3*wordSize + avgNeighbors*wordSize) + (avgNeighbors*3)*wordSize) + 3*wordSize)) + (nAtom*((wordSize*3 + wordSize*3) + wordSize*3))))
  expanding, but in terms of x:
  = (100*((x*2) + (x*2) + 0 + (x*(((2.5^3*(x / ((10*10)*10)))*27)*8)) + (x*(((((4 / 3)*3.14)*2.5^3)*(x / ((10*10)*10)))*(8 + 13))) + (x*2))) / (100*((x*((4*3 + 4*3) + 4*3)) + (x*((4*3 + 4*3) + 4*3)) + (8*(((((((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4) + ((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4)) + ((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4)) + ((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4)) + ((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4)) + ((2*5)*5)*(((2.5^3*(x / ((10*10)*10)))*3)*4))) + (x*((((2.5^3*(x / ((10*10)*10)))*3)*4)*27 + ((((4 / 3)*3.14)*2.5^3)*(x / ((10*10)*10)))*4)) + (x*(((3*4 + ((((4 / 3)*3.14)*2.5^3)*(x / ((10*10)*10)))*4) + (((((4 / 3)*3.14)*2.5^3)*(x / ((10*10)*10)))*3)*4) + 3*4)) + (x*((4*3 + 4*3) + 4*3))))
