
------------------- Syntax Trees ---------------------

----- Main Machine Model -----
Machine model:
   Globals:
      Identifier fcNodes = 
         Int: 1
      Identifier fcJoulesPerByte = 
         Binary Op *
            LHS
               Int: 20
            RHS
               Real: 1e-09
      Identifier qdrLatency = 
         Binary Op *
            LHS
               Real: 1.07
            RHS
               Real: 1e-06
      Identifier qdrBW = 
         Binary Op *
            LHS
               Int: 4
            RHS
               Real: 1e+09
      Identifier fNumCores = 
         Int: 16
      Identifier fCoreClock = 
         Range:
            Default value:
               Binary Op *
                  LHS
                     Int: 1300
                  RHS
                     Real: 1e+06
            Minimum value:
               Binary Op *
                  LHS
                     Int: 100
                  RHS
                     Real: 1e+06
            Maximum value:
               Binary Op *
                  LHS
                     Int: 2000
                  RHS
                     Real: 1e+06
      Identifier fSIMD = 
         Int: 32
      Identifier gddr5Clock = 
         Range:
            Default value:
               Binary Op *
                  LHS
                     Int: 3700
                  RHS
                     Real: 1e+06
            Minimum value:
               Binary Op *
                  LHS
                     Int: 100
                  RHS
                     Real: 1e+06
            Maximum value:
               Binary Op *
                  LHS
                     Int: 4000
                  RHS
                     Real: 1e+06
      Identifier gddr5Width = 
         Int: 48
      Identifier eccPenalty = 
         Real: 0.75
      Identifier gddr5BW = 
         Binary Op *
            LHS
               Binary Op *
                  LHS
                     Ident: gddr5Clock
                  RHS
                     Ident: gddr5Width
            RHS
               Ident: eccPenalty
      Identifier gddr5Lat = 
         Binary Op /
            LHS
               Binary Op *
                  LHS
                     Int: 50
                  RHS
                     Real: 1e-09
            RHS
               Ident: fSIMD
      Identifier gddr5Cap = 
         Binary Op *
            LHS
               Int: 6
            RHS
               Real: 1e+09
      Identifier pcieBW = 
         Binary Op *
            LHS
               Int: 6
            RHS
               Real: 1e+09
      Identifier pcieLat = 
         Binary Op *
            LHS
               Int: 15
            RHS
               Real: 1e-06
      Identifier fIdle = 
         Int: 30
      Identifier fTDP = 
         Int: 250
   Components:
      interconnect: 'qdrInfiniband'
         Property 'fatTree'=
         Resource 'messages' (arg=msgsize) quantity=
            Binary Op +
               LHS
                  Ident: qdrLatency
               RHS
                  Binary Op /
                     LHS
                        Ident: msgsize
                     RHS
                        Ident: qdrBW
            Trait 'separate' (arg=nMessages): quantity=
                  Binary Op *
                     LHS
                        Ident: nMessages
                     RHS
                        Ident: base
      socket: 'nvidia_m2090'
         Contains: core: fermiCore
            Of quantity: 
               Ident: fNumCores
         Contains: memory: gddr5
         Contains: cache: fermiSP
         Contains: link: pcie
         Static power: 
            Ident: fIdle
         Dynamic power: undefined
      core: 'fermiCore'
         Resource 'flops' (arg=number) quantity=
            Binary Op /
               LHS
                  Ident: number
               RHS
                  Ident: fCoreClock
            Trait 'dp': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 2
            Trait 'simd': quantity=
                  Binary Op /
                     LHS
                        Ident: base
                     RHS
                        Ident: fSIMD
            Trait 'fmad': quantity=
                  Binary Op /
                     LHS
                        Ident: base
                     RHS
                        Int: 2
            Trait 'sin': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 18
         Static power: undefined
         Dynamic power: 
            Binary Op /
               LHS
                  Binary Op -
                     LHS
                        Ident: fTDP
                     RHS
                        Ident: fIdle
               RHS
                  Ident: fNumCores
      memory: 'gddr5'
         Property 'capacity'=
            Ident: gddr5Cap
         Resource 'loads' (arg=numBytes) quantity=
            Binary Op +
               LHS
                  Ident: gddr5Lat
               RHS
                  Binary Op /
                     LHS
                        Ident: numBytes
                     RHS
                        Ident: gddr5BW
            Trait 'stride': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 2
            Trait 'random': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 8
         Resource 'stores' (arg=numBytes) quantity=
            Binary Op +
               LHS
                  Ident: gddr5Lat
               RHS
                  Binary Op /
                     LHS
                        Ident: numBytes
                     RHS
                        Ident: gddr5BW
            Trait 'stride': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 2
            Trait 'random': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 8
         Static power: undefined
         Dynamic power: 
            Binary Op -
               LHS
                  Ident: fTDP
               RHS
                  Ident: fIdle
         Conflict: loads,stores
         Conflict: loads,flops
      cache: 'fermiSP'
         Property 'capacity'=
            Binary Op *
               LHS
                  Int: 48
               RHS
                  Real: 1000
         Property 'latency'=
            Int: 0
         Property 'bandwidth'=
            Binary Op /
               LHS
                  Binary Op *
                     LHS
                        Int: 1177
                     RHS
                        Real: 1e+09
               RHS
                  Int: 16
      link: 'pcie'
         Resource 'intracomm' (arg=bytes) quantity=
            Binary Op +
               LHS
                  Ident: pcieLat
               RHS
                  Binary Op /
                     LHS
                        Ident: bytes
                     RHS
                        Ident: pcieBW
            Traits: none
      machine: 'fermiCluster'
         Contains: node: genericFermi
            Of quantity: 
               Ident: fcNodes
         Contains: interconnect: qdrInfiniband
         Resource 'bbw' (arg=msgVolume) quantity=
            Binary Op /
               LHS
                  Ident: msgVolume
               RHS
                  Ident: bisectionBW
            Traits: none
         Static power: undefined
         Dynamic power: 
            Binary Op *
               LHS
                  Ident: msgVolume
               RHS
                  Ident: fcJoulesPerByte
      node: 'genericFermi'
         Contains: socket: nvidia_m2090
            Of quantity: 
               Int: 1
----- Main Application Model -----
App model fft3d:
   Globals:
      Identifier Z = 
         Binary Op *
            LHS
               Int: 24
            RHS
               Real: 1e+06
      Identifier L = 
         Int: 128
      Identifier n = 
         Range:
            Default value:
               Int: 8192
            Minimum value:
               Int: 1000
            Maximum value:
               Int: 10000
      Identifier wordSize = 
         Int: 16
      Identifier a = 
         Real: 6.3
      Data fftVolume:
         Quantity:
            Binary Op *
               LHS
                  Binary Op ^
                     LHS
                        Ident: n
                     RHS
                        Int: 3
               RHS
                  Ident: wordSize
   Kernels:
      Kernel shuffle:
         Control node '101': sequential:
            Execution Block (control node '100')
               Parallelism:
                  Binary Op ^
                     LHS
                        Ident: n
                     RHS
                        Int: 2
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Ident: n
                     RHS
                        Ident: wordSize
                  To/From: fftVolume
               Requires stores of quantity: 
                  Binary Op *
                     LHS
                        Ident: n
                     RHS
                        Ident: wordSize
                  To/From: fftVolume
      Kernel localFFT:
         Control node '103': sequential:
            Execution Block (control node '102')
               Parallelism:
                  Binary Op ^
                     LHS
                        Ident: n
                     RHS
                        Int: 2
               Requires flops of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Int: 5
                           RHS
                              Ident: n
                     RHS
                        Call log2 with 1 args:
                           Ident: n
                  As dp
                  As simd
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Ident: a
                                 RHS
                                    Ident: n
                           RHS
                              Call max with 2 args:
                                 Int: 1
                                 Binary Op /
                                    LHS
                                       Call log with 1 args:
                                          Ident: n
                                    RHS
                                       Call log with 1 args:
                                          Ident: Z
                     RHS
                        Ident: wordSize
                  To/From: fftVolume
      Kernel ibmFFT:
         Control node '105': sequential:
            Execution Block (control node '104')
               Parallelism:
                  Binary Op ^
                     LHS
                        Ident: n
                     RHS
                        Int: 2
               Requires flops of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Int: 8
                           RHS
                              Ident: n
                     RHS
                        Call log2 with 1 args:
                           Ident: n
                  As dp
                  As simd
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Ident: a
                                 RHS
                                    Binary Op +
                                       LHS
                                          Int: 1
                                       RHS
                                          Binary Op /
                                             LHS
                                                Ident: n
                                             RHS
                                                Ident: L
                           RHS
                              Binary Op +
                                 LHS
                                    Int: 1
                                 RHS
                                    Binary Op /
                                       LHS
                                          Call log with 1 args:
                                             Ident: n
                                       RHS
                                          Call log with 1 args:
                                             Ident: Z
                     RHS
                        Ident: wordSize
                  To/From: fftVolume
      Kernel bigO:
         Control node '107': sequential:
            Execution Block (control node '106')
               Parallelism:
                  Binary Op ^
                     LHS
                        Ident: n
                     RHS
                        Int: 2
               Requires flops of quantity: 
                  Binary Op *
                     LHS
                        Ident: n
                     RHS
                        Call log2 with 1 args:
                           Ident: n
                  As dp
                  As simd
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Ident: a
                                 RHS
                                    Binary Op +
                                       LHS
                                          Int: 1
                                       RHS
                                          Binary Op /
                                             LHS
                                                Ident: n
                                             RHS
                                                Ident: L
                           RHS
                              Binary Op +
                                 LHS
                                    Int: 1
                                 RHS
                                    Binary Op /
                                       LHS
                                          Call log with 1 args:
                                             Ident: n
                                       RHS
                                          Call log with 1 args:
                                             Ident: Z
                     RHS
                        Ident: wordSize
                  To/From: fftVolume
      Kernel exchange:
         Control node '109': sequential:
            Execution Block (control node '108')
               Parallelism:
                  Binary Op ^
                     LHS
                        Ident: n
                     RHS
                        Int: 2
               Requires messages of quantity: 
                  Binary Op *
                     LHS
                        Ident: n
                     RHS
                        Ident: wordSize
      Kernel main:
         Control node '117': sequential:
            Control node '110': kernel call localFFT
            Control node '111': kernel call shuffle
            Control node '112': kernel call exchange
            Control node '113': kernel call localFFT
            Control node '114': kernel call shuffle
            Control node '115': kernel call exchange
            Control node '116': kernel call localFFT

-----------------------------------------------------


 ------  Application Analysis ------
>> Basic control flow expression
flops    = ((shuffle*2) + (exchange*2) + (localFFT*3))

>> Raw expression without variable expansion:
flops    = ((n^2*((5*n)*(log(n)/log(2)))) + 0 + 0 + (n^2*((5*n)*(log(n)/log(2)))) + 0 + 0 + (n^2*((5*n)*(log(n)/log(2)))))
messages = (0 + 0 + (n^2*(n*wordSize)) + 0 + 0 + (n^2*(n*wordSize)) + 0)
loads    = ((n^2*(((a*n)*max(1, (log(n)) / (log(Z))))*wordSize)) + (n^2*(n*wordSize)) + 0 + (n^2*(((a*n)*max(1, (log(n)) / (log(Z))))*wordSize)) + (n^2*(n*wordSize)) + 0 + (n^2*(((a*n)*max(1, (log(n)) / (log(Z))))*wordSize)))
stores   = (0 + (n^2*(n*wordSize)) + 0 + 0 + (n^2*(n*wordSize)) + 0 + 0)

>> Raw expression with variable expansion:
flops    = ((8192^2*((5*8192)*(log(8192)/log(2)))) + 0 + 0 + (8192^2*((5*8192)*(log(8192)/log(2)))) + 0 + 0 + (8192^2*((5*8192)*(log(8192)/log(2)))))
messages = (0 + 0 + (8192^2*(8192*16)) + 0 + 0 + (8192^2*(8192*16)) + 0)
loads    = ((8192^2*(((6.3*8192)*max(1, (log(8192)) / (log(24*1e+06))))*16)) + (8192^2*(8192*16)) + 0 + (8192^2*(((6.3*8192)*max(1, (log(8192)) / (log(24*1e+06))))*16)) + (8192^2*(8192*16)) + 0 + (8192^2*(((6.3*8192)*max(1, (log(8192)) / (log(24*1e+06))))*16)))
stores   = (0 + (8192^2*(8192*16)) + 0 + 0 + (8192^2*(8192*16)) + 0 + 0)

>> as values, With parameters using default values
flops    = 1.07202e+14
messages = 1.75922e+13
loads    = 1.83838e+14
stores   = 1.75922e+13

>> Simplification test:
flops (noexp)       = ((n^2*((5*n)*(log(n)/log(2)))) + 0 + 0 + (n^2*((5*n)*(log(n)/log(2)))) + 0 + 0 + (n^2*((5*n)*(log(n)/log(2)))))
flops (noexp,simpl) = n*((((n^2) * 5 * ((log(n)/log(2))))) + (((n^2) * 5 * ((log(n)/log(2))))) + (((n^2) * 5 * ((log(n)/log(2))))))
flops (exp)         = ((8192^2*((5*8192)*(log(8192)/log(2)))) + 0 + 0 + (8192^2*((5*8192)*(log(8192)/log(2)))) + 0 + 0 + (8192^2*((5*8192)*(log(8192)/log(2)))))
flops (exp,simpl)   = 1.07202e+14

There are 1 parameters with ranges.
>> with parameter ''n'' set to its minimum of 1000:
flops    = 1.49487e+11
messages = 3.2e+10
loads    = 3.344e+11
stores   = 3.2e+10

-> and now with ''n'' set to its maximum of 10000:
flops    = 1.99316e+14
messages = 3.2e+13
loads    = 3.344e+14
stores   = 3.2e+13

>> Expression with parameter ''n'' left as a variable (named x) (and simplified):
flops = ((x^2*((5*x)*(log(x)/log(2)))) + 0 + 0 + (x^2*((5*x)*(log(x)/log(2)))) + 0 + 0 + (x^2*((5*x)*(log(x)/log(2)))))
flops = x*((((x^2) * 5 * ((log(x)/log(2))))) + (((x^2) * 5 * ((log(x)/log(2))))) + (((x^2) * 5 * ((log(x)/log(2))))))




>> Kernel shuffle

Raw flops for kernel 'shuffle' = 0
Raw loads for kernel 'shuffle' = 8.79609e+12
Raw stores for kernel 'shuffle' = 8.79609e+12
Raw messages for kernel 'shuffle' = 0

Exclusive set size is n^3*wordSize
Inclusive set size is n^3*wordSize

Calculating flops/byte intensity for kernel 'shuffle':
  = 0 / (n^2*(n*wordSize + n*wordSize))
  expanding, but in terms of x:
  = 0 / (8192^2*(8192*16 + 8192*16))


>> Kernel localFFT

Raw flops for kernel 'localFFT' = 3.57341e+13
Raw loads for kernel 'localFFT' = 5.54154e+13
Raw stores for kernel 'localFFT' = 0
Raw messages for kernel 'localFFT' = 0

Exclusive set size is n^3*wordSize
Inclusive set size is n^3*wordSize

Calculating flops/byte intensity for kernel 'localFFT':
  = (n^2*((5*n)*(log(n)/log(2)))) / (n^2*(((a*n)*max(1, (log(n)) / (log(Z))))*wordSize))
  expanding, but in terms of x:
  = (8192^2*((5*8192)*(log(8192)/log(2)))) / (8192^2*(((6.3*8192)*max(1, (log(8192)) / (log(24*1e+06))))*16))


>> Kernel ibmFFT

Raw flops for kernel 'ibmFFT' = 5.71746e+13
Raw loads for kernel 'ibmFFT' = 6.72849e+11
Raw stores for kernel 'ibmFFT' = 0
Raw messages for kernel 'ibmFFT' = 0

Exclusive set size is n^3*wordSize
Inclusive set size is n^3*wordSize

Calculating flops/byte intensity for kernel 'ibmFFT':
  = (n^2*((8*n)*(log(n)/log(2)))) / (n^2*(((a*(1 + n / L))*(1 + (log(n)) / (log(Z))))*wordSize))
  expanding, but in terms of x:
  = (8192^2*((8*8192)*(log(8192)/log(2)))) / (8192^2*(((6.3*(1 + 8192 / 128))*(1 + (log(8192)) / (log(24*1e+06))))*16))


>> Kernel bigO

Raw flops for kernel 'bigO' = 7.14683e+12
Raw loads for kernel 'bigO' = 6.72849e+11
Raw stores for kernel 'bigO' = 0
Raw messages for kernel 'bigO' = 0

Exclusive set size is n^3*wordSize
Inclusive set size is n^3*wordSize

Calculating flops/byte intensity for kernel 'bigO':
  = (n^2*(n*(log(n)/log(2)))) / (n^2*(((a*(1 + n / L))*(1 + (log(n)) / (log(Z))))*wordSize))
  expanding, but in terms of x:
  = (8192^2*(8192*(log(8192)/log(2)))) / (8192^2*(((6.3*(1 + 8192 / 128))*(1 + (log(8192)) / (log(24*1e+06))))*16))


>> Kernel exchange

Raw flops for kernel 'exchange' = 0
Raw loads for kernel 'exchange' = 0
Raw stores for kernel 'exchange' = 0
Raw messages for kernel 'exchange' = 8.79609e+12

Exclusive set size is 0
Inclusive set size is 0

Calculating flops/byte intensity for kernel 'exchange':
  = 0 / 0
  expanding, but in terms of x:
  = 0 / 0


>> Kernel main

Raw flops for kernel 'main' = 1.07202e+14
Raw loads for kernel 'main' = 1.83838e+14
Raw stores for kernel 'main' = 1.75922e+13
Raw messages for kernel 'main' = 1.75922e+13

Exclusive set size is 0
Inclusive set size is n^3*wordSize

Calculating flops/byte intensity for kernel 'main':
  = (((n^2*((5*n)*(log(n)/log(2)))) + 0 + 0 + (n^2*((5*n)*(log(n)/log(2)))) + 0 + 0 + (n^2*((5*n)*(log(n)/log(2)))))) / (((n^2*(((a*n)*max(1, (log(n)) / (log(Z))))*wordSize)) + (n^2*(n*wordSize + n*wordSize)) + 0 + (n^2*(((a*n)*max(1, (log(n)) / (log(Z))))*wordSize)) + (n^2*(n*wordSize + n*wordSize)) + 0 + (n^2*(((a*n)*max(1, (log(n)) / (log(Z))))*wordSize))))
  expanding, but in terms of x:
  = (((8192^2*((5*8192)*(log(8192)/log(2)))) + 0 + 0 + (8192^2*((5*8192)*(log(8192)/log(2)))) + 0 + 0 + (8192^2*((5*8192)*(log(8192)/log(2)))))) / (((8192^2*(((6.3*8192)*max(1, (log(8192)) / (log(24*1e+06))))*16)) + (8192^2*(8192*16 + 8192*16)) + 0 + (8192^2*(((6.3*8192)*max(1, (log(8192)) / (log(24*1e+06))))*16)) + (8192^2*(8192*16 + 8192*16)) + 0 + (8192^2*(((6.3*8192)*max(1, (log(8192)) / (log(24*1e+06))))*16))))

 ------  Machine Analysis ------


>> for socket type 'nvidia_m2090' <<
  totalcores = ((1*fNumCores)*1)*fcNodes
  totalcores = 16

  peak sp gflops: 20.8
  peak sp/simd gflops: 665.6
  peak sp/simd/fmad gflops: 1331.2
  peak dp gflops: 10.4
  peak dp/simd gflops: 332.8
  peak dp/simd/fmad gflops: 665.6
  ...
  peak bw in GB/sec: 133.2


>> testing expressions
  time to process 1e9 sp flops in sec: (((1e+09 / fCoreClock) / fNumCores) / 1) / fcNodes
  time to process 1e9 sp flops in sec (expanded): (((1e+09 / (1300*1e+06)) / 16) / 1) / 1
  time to process 1e9 sp/simd flops in sec: ((((1e+09 / fCoreClock) / fSIMD) / fNumCores) / 1) / fcNodes
  time to process 1e9 sp/simd flops in sec (expanded): ((((1e+09 / (1300*1e+06)) / 32) / 16) / 1) / 1
  time to read 1e9 bytes in sec: ((gddr5Lat + 1e+09 / gddr5BW) / 1) / fcNodes
  time to read 1e9 bytes in sec (expanded): (((50*1e-09) / 32 + 1e+09 / (((3700*1e+06)*48)*0.75)) / 1) / 1

 ------  Combined Analysis ------


++Predicting runtime on kernel 'shuffle' for socket type nvidia_m2090
run time (expression) = ((ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (n*wordSize) / gddr5BW) + ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (n*wordSize) / gddr5BW)))
run time (value)      = 132.283
run time (value2)     = 132.283
app model data transfer time = ((pcieLat + (n^3*wordSize) / pcieBW) / 1) / fcNodes
Scaling over param 'n':
value	runtime 	datatime	sum
1000 	0.243365 	2.66668 	2.91005
1291.55 	0.522795 	5.74517 	6.26797
1668.1 	1.12379 	12.3776 	13.5014
2154.43 	2.41691 	26.6667 	29.0836
2782.56 	5.20001 	57.4516 	62.6516
3593.81 	11.1913 	123.776 	134.967
4641.59 	24.0914 	266.667 	290.758
5994.84 	51.8705 	574.516 	626.386
7742.64 	111.697 	1237.76 	1349.45
10000 	240.553 	2666.67 	2907.22


++Predicting runtime on kernel 'localFFT' for socket type nvidia_m2090
run time (expression) = ((ceil((n^2) / (((1*fNumCores)*1)*fcNodes))*(((((5*n)*(log(n)/log(2))) / fCoreClock)*2) / fSIMD) + ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (((a*n)*max(1, (log(n)) / (log(Z))))*wordSize) / gddr5BW)))
run time (value)      = 523.51
run time (value2)     = 523.51
app model data transfer time = ((pcieLat + (n^3*wordSize) / pcieBW) / 1) / fcNodes
Scaling over param 'n':
value	runtime 	datatime	sum
1000 	0.908046 	2.66668 	3.57473
1291.55 	1.96752 	5.74517 	7.71269
1668.1 	4.26335 	12.3776 	16.6409
2154.43 	9.23845 	26.6667 	35.9051
2782.56 	20.0196 	57.4516 	77.4712
3593.81 	43.3824 	123.776 	167.158
4641.59 	94.0092 	266.667 	360.676
5994.84 	203.715 	574.516 	778.231
7742.64 	441.438 	1237.76 	1679.19
10000 	956.548 	2666.67 	3623.21


++Predicting runtime on kernel 'ibmFFT' for socket type nvidia_m2090
run time (expression) = ((ceil((n^2) / (((1*fNumCores)*1)*fcNodes))*(((((8*n)*(log(n)/log(2))) / fCoreClock)*2) / fSIMD) + ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (((a*(1 + n / L))*(1 + (log(n)) / (log(Z))))*wordSize) / gddr5BW)))
run time (value)      = 176.955
run time (value2)     = 176.955
app model data transfer time = ((pcieLat + (n^3*wordSize) / pcieBW) / 1) / fcNodes
Scaling over param 'n':
value	runtime 	datatime	sum
1000 	0.250504 	2.66668 	2.91719
1291.55 	0.557748 	5.74517 	6.30292
1668.1 	1.24111 	12.3776 	13.6187
2154.43 	2.75998 	26.6667 	29.4267
2782.56 	6.13335 	57.4516 	63.585
3593.81 	13.6199 	123.776 	137.396
4641.59 	30.2228 	266.667 	296.89
5994.84 	67.016 	574.516 	641.532
7742.64 	148.495 	1237.76 	1386.25
10000 	328.806 	2666.67 	2995.47


++Predicting runtime on kernel 'bigO' for socket type nvidia_m2090
run time (expression) = ((ceil((n^2) / (((1*fNumCores)*1)*fcNodes))*((((n*(log(n)/log(2))) / fCoreClock)*2) / fSIMD) + ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (((a*(1 + n / L))*(1 + (log(n)) / (log(Z))))*wordSize) / gddr5BW)))
run time (value)      = 26.6311
run time (value2)     = 26.6311
app model data transfer time = ((pcieLat + (n^3*wordSize) / pcieBW) / 1) / fcNodes
Scaling over param 'n':
value	runtime 	datatime	sum
1000 	0.0408875 	2.66668 	2.70757
1291.55 	0.0894127 	5.74517 	5.83459
1668.1 	0.196085 	12.3776 	12.5737
2154.43 	0.430902 	26.6667 	27.0976
2782.56 	0.948242 	57.4516 	58.3998
3593.81 	2.08862 	123.776 	125.864
4641.59 	4.60299 	266.667 	271.27
5994.84 	10.1471 	574.516 	584.663
7742.64 	22.3708 	1237.76 	1260.13
10000 	49.3165 	2666.67 	2715.98


++Predicting runtime on kernel 'exchange' for socket type nvidia_m2090
run time (expression) = ((ceil((n^2) / 1)*(qdrLatency + (n*wordSize) / qdrBW)))
run time (value)      = 2270.83
run time (value2)     = 2270.83
app model data transfer time = ((pcieLat + 0 / pcieBW) / 1) / fcNodes
Scaling over param 'n':
value	runtime 	datatime	sum
1000 	5.07 	1.5e-05 	5.07001
1291.55 	10.4026 	1.5e-05 	10.4026
1668.1 	21.5437 	1.5e-05 	21.5437
2154.43 	44.9665 	1.5e-05 	44.9665
2782.56 	94.462 	1.5e-05 	94.462
3593.81 	199.483 	1.5e-05 	199.483
4641.59 	423.052 	1.5e-05 	423.052
5994.84 	900.228 	1.5e-05 	900.228
7742.64 	1920.78 	1.5e-05 	1920.78
10000 	4107 	1.5e-05 	4107


++Predicting runtime on kernel 'main' for socket type nvidia_m2090
run time (expression) = ((((ceil((n^2) / (((1*fNumCores)*1)*fcNodes))*(((((5*n)*(log(n)/log(2))) / fCoreClock)*2) / fSIMD) + ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (((a*n)*max(1, (log(n)) / (log(Z))))*wordSize) / gddr5BW)))) + (((ceil((n^2) / 1)*(qdrLatency + (n*wordSize) / qdrBW)))) + (((ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (n*wordSize) / gddr5BW) + ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (n*wordSize) / gddr5BW)))) + (((ceil((n^2) / (((1*fNumCores)*1)*fcNodes))*(((((5*n)*(log(n)/log(2))) / fCoreClock)*2) / fSIMD) + ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (((a*n)*max(1, (log(n)) / (log(Z))))*wordSize) / gddr5BW)))) + (((ceil((n^2) / 1)*(qdrLatency + (n*wordSize) / qdrBW)))) + (((ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (n*wordSize) / gddr5BW) + ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (n*wordSize) / gddr5BW)))) + (((ceil((n^2) / (((1*fNumCores)*1)*fcNodes))*(((((5*n)*(log(n)/log(2))) / fCoreClock)*2) / fSIMD) + ceil((n^2) / ((1*1)*fcNodes))*(gddr5Lat + (((a*n)*max(1, (log(n)) / (log(Z))))*wordSize) / gddr5BW)))))
run time (value)      = 6376.76
run time (value2)     = 6376.76
app model data transfer time = ((pcieLat + (n^3*wordSize) / pcieBW) / 1) / fcNodes
Scaling over param 'n':
value	runtime 	datatime	sum
1000 	13.3509 	2.66668 	16.0175
1291.55 	27.7534 	5.74517 	33.4985
1668.1 	58.125 	12.3776 	70.5026
2154.43 	122.482 	26.6667 	149.149
2782.56 	259.383 	57.4516 	316.834
3593.81 	551.496 	123.776 	675.272
4641.59 	1176.32 	266.667 	1442.98
5994.84 	2515.34 	574.516 	3089.86
7742.64 	5389.27 	1237.76 	6627.02
10000 	11564.8 	2666.67 	14231.4
