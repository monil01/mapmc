// 3D_FFT.aspen
// 3D FFT using Pencil Decomposition

// This model based on the technical report "Prospects 
// for scalable 3D FFTs on heterogeneous exascale systems"
// Czechowski et al. [GT-CSE-11-02]. Georgia Tech.

model fft3d {

// Reminder: In the future, the machine model will set these parameters for us.
param Z = 24 * mega // --> LL $$ Capacity 
param L = 128 // --> Cache line size

// Dimensions of cubic 3D Volume
param n = 8192 in 1000 .. 10000
param wordSize = 16 // double complex
param a = 6.3 // constant for cache miss calculation, see TR 5.1.2

data fftVolume [n^3 * wordSize]

// Shuffle 
kernel shuffle {
  execute [n^2]
  {
      loads  [n * wordSize] from fftVolume
      stores [n * wordSize] to fftVolume
  }
}

// Local 1D FFT using theoretical bound on FLOPs
kernel localFFT {
  execute [n^2]
  {
      flops [5 * n * log2(n)] as dp, simd
      loads [a * n * max(1, log(n)/log(Z)) * wordSize] from fftVolume  
  }
}

// Local 1D FFT using IBM's increased approximation for FLOPs (incorporates data hazards)
kernel ibmFFT {
  execute [n^2]
  {
      flops [8 * n * log2(n)] as dp, simd
      // Based on analysis of FFT mem pattern, see tech report 5.1.2
      loads [a * (1 + (n/L)) * (1 + (log(n)/log(Z))) * wordSize] from fftVolume
  }
}
// N squared ops reference line
kernel bigO {
  execute [n^2]
  {
      flops [n * log2(n)] as dp, simd
      loads [a * (1 + (n/L)) * (1 + (log(n)/log(Z))) * wordSize] from fftVolume
  }
}
 
// All to all exchange.
kernel exchange {
  execute [n^2]
  {
      // Each pencil must be sent
      messages [n * wordSize]
  }
}

kernel main {
    call localFFT // in x
    call shuffle
    call exchange
    call localFFT // in y
    call shuffle
    call exchange
    call localFFT // in z
}

}
